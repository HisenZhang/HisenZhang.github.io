<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hisen&#39;s Blog</title>
    <link>https://hisenz.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Developers of all lands, vereinigt euch!</description>
    <pubDate>Fri, 30 Nov 2018 10:44:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Nov. 30, 2018 at Dubai</title>
      <link>https://hisenz.com/2018/11/30/Nov-30-2018-at-Dubai/</link>
      <guid>https://hisenz.com/2018/11/30/Nov-30-2018-at-Dubai/</guid>
      <pubDate>Fri, 30 Nov 2018 10:36:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;Nov. 30, 2018 at Dubai.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Nov. 30, 2018 at Dubai.</p><a id="more"></a><p><img src="https://s1.ax1x.com/2018/11/30/FmwH2R.jpg" alt="FmwH2R.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/Fmw7G9.jpg" alt="Fmw7G9.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/Fmwbx1.jpg" alt="Fmwbx1.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/FmwLKx.jpg" alt="FmwLKx.jpg"></p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/11/30/Nov-30-2018-at-Dubai/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cartesian 3D Vector Lib</title>
      <link>https://hisenz.com/2018/11/21/Cartesian-3D-Vector-lib/</link>
      <guid>https://hisenz.com/2018/11/21/Cartesian-3D-Vector-lib/</guid>
      <pubDate>Wed, 21 Nov 2018 12:47:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/HisenZhang/Cartesian-3D-Vector-lib&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A simple vector library written in plain C for educational purpose.&lt;/p&gt;
&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This library is written in hope to simplify the coding process for non-professional vector computation.&lt;/p&gt;
&lt;p&gt;This library &lt;strong&gt;should not&lt;/strong&gt; be used for industrial or scientific use due to the limited precision and performance; Complex number is not supported either.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://github.com/HisenZhang/Cartesian-3D-Vector-lib" target="_blank" rel="noopener">View on GitHub</a></p><p>A simple vector library written in plain C for educational purpose.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This library is written in hope to simplify the coding process for non-professional vector computation.</p><p>This library <strong>should not</strong> be used for industrial or scientific use due to the limited precision and performance; Complex number is not supported either.</p><a id="more"></a><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol><li><p>You may copy the files in <code>./include</code> to your project directory and compile it seperately;</p></li><li><p>You may generate a single head file <code>vector.h</code> for your project:</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make single</span><br></pre></td></tr></table></figure><p> This generate a single head file in the project root directory <code>./</code>. Copy the <code>./vector.h</code> to your project and include it.</p></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>This is a brief demonstration on the commonly used functions’ usage. The output of each statement follows in comments. </p><p>Several practical examples are available in <code>./example</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/vector.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize vectors</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span> A = vecSet(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>); </span><br><span class="line">    <span class="built_in">vector</span> B = vecSet(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">3.0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// vecPrint() pretty print the vector</span></span><br><span class="line">    <span class="comment">// in the form of &lt;x,y,z&gt; |modulus|</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Vector A,B\n"</span>);</span><br><span class="line">    vecPrint(A); <span class="comment">// &lt; 1.00, 2.00, 0.00&gt; | 2.24| </span></span><br><span class="line">    vecnPrint(B, <span class="number">4</span>); <span class="comment">// &lt; 0.0000, 1.0000, 3.0000&gt; | 3.1623|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Arithmetic operations</span></span><br><span class="line"><span class="comment">// The comming statements demonstarte </span></span><br><span class="line">    <span class="comment">// 1. Vector Addtion</span></span><br><span class="line">    <span class="comment">// 2. Vector Subtraction</span></span><br><span class="line">    <span class="comment">// 3. Vector Cross Product</span></span><br><span class="line">    <span class="comment">// 4. Vector Dot Product</span></span><br><span class="line">    <span class="comment">// 5. Vector Scalar Product</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nADD, SUB, CRX, DOT, SCL\n"</span>);</span><br><span class="line">    vecPrint(vecAdd(A, B));  <span class="comment">// &lt; 1.00, 3.00, 3.00&gt; | 4.36|</span></span><br><span class="line">    vecPrint(vecSub(A, B));  <span class="comment">// &lt; 1.00, 1.00,-3.00&gt; | 3.32|</span></span><br><span class="line">    vecPrint(vecCrx(A, B));  <span class="comment">// &lt; 6.00,-3.00, 1.00&gt; | 6.78|</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"% .2f\n"</span>,vecDot(A, B)); <span class="comment">// 2.00</span></span><br><span class="line">    vecPrint(vecScl(A, <span class="number">4.0</span>));  <span class="comment">// &lt; 8.00, 0.00, 0.00&gt; | 8.00|</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Find unit vector</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nUnit A,B\n"</span>);</span><br><span class="line">    vecPrint(vecUnit(A));  <span class="comment">// &lt; 0.45, 0.89, 0.00&gt; | 2.24|</span></span><br><span class="line">    vecPrint(vecUnit(B));  <span class="comment">// &lt; 0.00, 0.32, 0.95&gt; | 3.16|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take negative</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nNEG A,B\n"</span>);</span><br><span class="line">    vecPrint(vecNeg(A));  <span class="comment">// &lt;-1.00,-2.00,-0.00&gt; | 2.24|</span></span><br><span class="line">    vecPrint(vecNeg(B));  <span class="comment">// &lt;-0.00,-1.00,-3.00&gt; | 3.16|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take modulus</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nMOD A,B\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|% .2f|\n"</span>,vecMod(A));  <span class="comment">// 2.24</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|% .2f|\n"</span>,vecMod(B));  <span class="comment">// 3.16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> z;</span><br><span class="line">    <span class="keyword">double</span> mag;</span><br><span class="line">&#125;<span class="built_in">vector</span>;</span><br></pre></td></tr></table></figure><p>The <code>vector</code> type contains components in three dimensions and the overall magnitude. All these data are in <code>double</code> type. Each time an operation is performed to a vector, the magnitude would update automatically. </p><p>You may get a component directly:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> V = vecSet(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>, V.x); <span class="comment">// This prints out the x component of vector V</span></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><h4 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h4><p><code>vecAdd(A, B)</code> returns the sum: <code>A + B</code>.</p><h4 id="Subtraction"><a href="#Subtraction" class="headerlink" title="Subtraction"></a>Subtraction</h4><p><code>vecSub(A, B)</code> returns the difference: <code>A - B</code>.</p><h4 id="Negative"><a href="#Negative" class="headerlink" title="Negative"></a>Negative</h4><p><code>vecNeg(V)</code> returns the negative: <code>- V</code>.</p><h4 id="Modulus"><a href="#Modulus" class="headerlink" title="Modulus"></a>Modulus</h4><p><code>vecMod(V)</code> returns the modulus: <code>| V |</code>.</p><h4 id="Unit-Vector"><a href="#Unit-Vector" class="headerlink" title="Unit Vector"></a>Unit Vector</h4><p><code>vecUnit(V)</code> returns the unit vector: <code>^ V</code>.</p><h4 id="Scalar-Product"><a href="#Scalar-Product" class="headerlink" title="Scalar Product"></a>Scalar Product</h4><p><code>vecScl(V, s)</code> returns the vector <code>s * V</code>.</p><h4 id="Dot-Product"><a href="#Dot-Product" class="headerlink" title="Dot Product"></a>Dot Product</h4><p><code>vecDot(A, B)</code> returns the dot product: <code>A · B</code>.</p><h4 id="Cross-Product"><a href="#Cross-Product" class="headerlink" title="Cross Product"></a>Cross Product</h4><p><code>vecCrx(A, B)</code> returns the Cross product: <code>A × B</code>.</p><h3 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h3><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><p>There’re two ways to initialize a vector:</p><ol><li><code>vecSet(x, y, z)</code> returns a vector specify the coordinates (x,y,z).</li><li><code>vecInit()</code> returns a vector with coordinates all of <code>0.0</code>. However, you should use <code>vecSet(0.0, 0.0, 0.0)</code> instead for better readability.</li></ol><h4 id="Pretty-Print"><a href="#Pretty-Print" class="headerlink" title="Pretty Print"></a>Pretty Print</h4><ol><li><code>vecPrint(V)</code> prints the vector in the form of <code>&lt;x, y, z&gt; | modulus |</code>, 2 decimal places by default</li><li><code>vecnPrint(V, p)</code> using the specified precision <code>p</code>. If p is 0, print in exponential form.</li></ol>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/11/21/Cartesian-3D-Vector-lib/#disqus_thread</comments>
    </item>
    
    <item>
      <title>汇编视角:不同优化级别下的GCC行为分析</title>
      <link>https://hisenz.com/2018/11/02/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</link>
      <guid>https://hisenz.com/2018/11/02/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</guid>
      <pubDate>Fri, 02 Nov 2018 15:58:55 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;本篇以memcpy这一函数为例, 分别在0-3的gcc优化级别下编译并反汇编, 并对反汇编得到的代码进行分析, 以观察不同优化级别下gcc的行为.&lt;/p&gt;
&lt;p&gt;本文使用的gcc版本 7.3.0&lt;/p&gt;
&lt;p&gt;以下汇编与反汇编均在x64平台上进行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Optimize-Options.html#Optimize-Options&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gcc的官方文档&lt;/a&gt;中有对于优化参数&lt;code&gt;-O&lt;/code&gt;的描述. 简要概括如下:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;优化级别&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;关闭优化. gcc的默认选项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在不明显拖慢编译速度的情况下减小代码尺寸, 提升执行速度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;在不以存储空间换运行时间的前提下, 采用几乎所有gcc支持的优化方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;二级优化的基础上进一步优化&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;还有便于debug的&lt;code&gt;Og&lt;/code&gt;, 骚操作(极致优化但不遵从编码规范)的&lt;code&gt;Ofast&lt;/code&gt;, 介于2-3级别间的&lt;code&gt;Os&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;整体上而言, 优化级别越高, 编译速度会越慢, 占用的内存越大; 同时, 生成的代码运行时速度越快, 可读性越低.&lt;/p&gt;
&lt;p&gt;下面我们用实际的例子来看一看不同优化级别下gcc的具体行为. 选择memcpy作为例子是因为它的实现代码足够简单, 但是涉及了传参, 条件判断和循环, 是逻辑密集型的代码, 能很好的体现gcc在逻辑上的优化.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本篇以memcpy这一函数为例, 分别在0-3的gcc优化级别下编译并反汇编, 并对反汇编得到的代码进行分析, 以观察不同优化级别下gcc的行为.</p><p>本文使用的gcc版本 7.3.0</p><p>以下汇编与反汇编均在x64平台上进行</p></blockquote><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><a href="https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Optimize-Options.html#Optimize-Options" target="_blank" rel="noopener">gcc的官方文档</a>中有对于优化参数<code>-O</code>的描述. 简要概括如下:</p><table><thead><tr><th style="text-align:center">优化级别</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">关闭优化. gcc的默认选项</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">在不明显拖慢编译速度的情况下减小代码尺寸, 提升执行速度</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">在不以存储空间换运行时间的前提下, 采用几乎所有gcc支持的优化方法</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">二级优化的基础上进一步优化</td></tr></tbody></table><p>还有便于debug的<code>Og</code>, 骚操作(极致优化但不遵从编码规范)的<code>Ofast</code>, 介于2-3级别间的<code>Os</code>.</p><p>整体上而言, 优化级别越高, 编译速度会越慢, 占用的内存越大; 同时, 生成的代码运行时速度越快, 可读性越低.</p><p>下面我们用实际的例子来看一看不同优化级别下gcc的具体行为. 选择memcpy作为例子是因为它的实现代码足够简单, 但是涉及了传参, 条件判断和循环, 是逻辑密集型的代码, 能很好的体现gcc在逻辑上的优化.</p><a id="more"></a><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C 实现"></a>C 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the implementation in coreutils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Since no stdlib included, define size_t</span></span><br><span class="line"><span class="comment">// On x64 size_t is defined as unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size_t unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span> <span class="params">(<span class="keyword">void</span> *destaddr, <span class="keyword">void</span> <span class="keyword">const</span> *srcaddr, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *dest = destaddr;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *src = srcaddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>)</span><br><span class="line">        *dest++ = *src++;</span><br><span class="line">    <span class="keyword">return</span> destaddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h3><p>编译与反汇编命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o memcpy.o memcpy.c -Ox <span class="comment"># x为优化级别</span></span><br><span class="line">objdump -d memcpy.o</span><br></pre></td></tr></table></figure><h4 id="关闭优化"><a href="#关闭优化" class="headerlink" title="关闭优化"></a>关闭优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:55                   push   %rbp; save old rbp</span><br><span class="line">   1:48 89 e5             mov    %rsp,%rbp; set rsp = new rbp</span><br><span class="line">   4:48 89 7d e8          mov    %rdi,-0x18(%rbp); destaddr -&gt; rbp-18h</span><br><span class="line">   8:48 89 75 e0          mov    %rsi,-0x20(%rbp); srcaddr -&gt; rbp-20h</span><br><span class="line">   c:48 89 55 d8          mov    %rdx,-0x28(%rbp); len -&gt; rbp-28h</span><br><span class="line">  10:48 8b 45 e8          mov    -0x18(%rbp),%rax; dest -&gt; rbp-8h</span><br><span class="line">  14:48 89 45 f8          mov    %rax,-0x8(%rbp);</span><br><span class="line">  18:48 8b 45 e0          mov    -0x20(%rbp),%rax; src -&gt; rbp-10h</span><br><span class="line">  1c:48 89 45 f0          mov    %rax,-0x10(%rbp);</span><br><span class="line">  20:eb 1d                jmp    3f &lt;memcpy+0x3f&gt;</span><br><span class="line">  22:48 8b 55 f0          mov    -0x10(%rbp),%rdx; inc src</span><br><span class="line">  26:48 8d 42 01          lea    0x1(%rdx),%rax;</span><br><span class="line">  2a:48 89 45 f0          mov    %rax,-0x10(%rbp);</span><br><span class="line">  2e:48 8b 45 f8          mov    -0x8(%rbp),%rax; inc dest</span><br><span class="line">  32:48 8d 48 01          lea    0x1(%rax),%rcx;</span><br><span class="line">  36:48 89 4d f8          mov    %rcx,-0x8(%rbp);</span><br><span class="line">  3a:0f b6 12             movzbl (%rdx),%edx; move content in src</span><br><span class="line">  3d:88 10                mov    %dl,(%rax); into dest bytewise</span><br><span class="line">  3f:48 8b 45 d8          mov    -0x28(%rbp),%rax; len --</span><br><span class="line">  43:48 8d 50 ff          lea    -0x1(%rax),%rdx;</span><br><span class="line">  47:48 89 55 d8          mov    %rdx,-0x28(%rbp);</span><br><span class="line">  4b:48 85 c0             test   %rax,%rax; if old len = 0 escape</span><br><span class="line">  4e:75 d2                jne    22 &lt;memcpy+0x22&gt;</span><br><span class="line">  50:48 8b 45 e8          mov    -0x18(%rbp),%rax; return dest</span><br><span class="line">  54:5d                   pop    %rbp; restore rbp</span><br><span class="line">  55:c3                   retq</span><br></pre></td></tr></table></figure><p>关闭优化生成的代码比较呆板, 但是严格按照x64的调用规范<code>call convention</code>操作, 入栈<code>rbp</code>. 这里比较低效的是gcc将所有通过寄存器传入的参数保存到栈内, 像是x86风格, 导致数据的读写变慢.</p><p>指针后自增的操作是先从内存取出变量放到中间寄存器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov    -0x8(%rbp),%rax</span><br></pre></td></tr></table></figure><p>自增这个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea    0x1(%rax),%rcx</span><br></pre></td></tr></table></figure><p>再写回内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov    %rcx,-0x8(%rbp)</span><br></pre></td></tr></table></figure><p>关键的复制操作是利用中间寄存器里的值来完成, 和正常的认知有些不一样.</p><p>有个奇怪的地方:还有明明是bytewise的复制操作(18行), 为什么这里拷贝了四字节再取低8位, gcc真是奇怪.</p><h4 id="一级优化"><a href="#一级优化" class="headerlink" title="一级优化"></a>一级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 0:48 89 f8             mov    %rdi,%rax; dest addr for return</span><br><span class="line"> 3:48 85 d2             test   %rdx,%rdx; if len = 0 escape </span><br><span class="line"> 6:74 17                je     1f &lt;memcpy+0x1f&gt;; </span><br><span class="line"> 8:b9 00 00 00 00       mov    $0x0,%ecx; initialize counter</span><br><span class="line"> d:44 0f b6 04 0e       movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">12:44 88 04 08          mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">16:48 83 c1 01          add    $0x1,%rcx; inc counter</span><br><span class="line">1a:48 39 d1             cmp    %rdx,%rcx; if count != len continue </span><br><span class="line">1d:75 ee                jne    d &lt;memcpy+0xd&gt;;</span><br><span class="line">1f:f3 c3                repz retq</span><br></pre></td></tr></table></figure><p>开启优化后得到另外一种风格. 可以看出参数没有被放入内存, 而是直接读写寄存器, 从时间效率上来看要快不少. </p><p>复制的关键代码只有三行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">add    $0x1,%rcx; inc counter</span><br></pre></td></tr></table></figure><p>不得不承认, gcc的这个写法还是挺漂亮的.</p><h4 id="二级优化"><a href="#二级优化" class="headerlink" title="二级优化"></a>二级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:48 85 d2             test   %rdx,%rdx; if len = 0 escape</span><br><span class="line">   3:48 89 f8             mov    %rdi,%rax; dest addr for return</span><br><span class="line">   6:74 1a                je     22 &lt;memcpy+0x22&gt;; if len = 0 escape</span><br><span class="line">   8:31 c9                xor    %ecx,%ecx; set ecx to 0</span><br><span class="line">   a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1); for alignment</span><br><span class="line">  10:44 0f b6 04 0e       movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">  15:44 88 04 08          mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">  19:48 83 c1 01          add    $0x1,%rcx; inc counter</span><br><span class="line">  1d:48 39 d1             cmp    %rdx,%rcx; if count != len continue</span><br><span class="line">  20:75 ee                jne    10 &lt;memcpy+0x10&gt;;</span><br><span class="line">  22:f3 c3                repz retq</span><br></pre></td></tr></table></figure><p>这一段代码和O1生成的大同小异.</p><p>第5行<code>ecx</code>与自己异或的操作一开始没看懂, 但是想了想XOR的运算规则:</p><table><thead><tr><th style="text-align:center">情况</th><th style="text-align:center">X</th><th style="text-align:center">Y</th><th style="text-align:center">X XOR Y</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>由于是和自己异或, 那么输入的<code>X</code>与<code>Y</code>必定相等, 也就是<code>情况A</code>和<code>情况D</code> - 这两种情况结果均为零.也就是说, 一个变量与自己异或得0.</p><p>所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor %ecx,%ecx</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov $0,%ecx</span><br></pre></td></tr></table></figure><p>这样写的可读性降低了. 但是为什么编译器认为前者是更好的方案呢?</p><p>我也为此感到困扰. 不过stackoverflow上我找到了一个<a href="https://stackoverflow.com/a/1396552" target="_blank" rel="noopener">回答</a>:</p><blockquote><p>The opcode is shorter than <code>mov eax, 0</code>, only 2 bytes</p></blockquote><p>仔细一看, 后者的操作码确实只有两字节:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8:31 c9                xor    %ecx,%ecx; set ecx to 0</span><br></pre></td></tr></table></figure><p>相对的, 需要五个字节(其中有四个是空字节)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8:b9 00 00 00 00       mov    $0x0,%ecx; initialize counter</span><br></pre></td></tr></table></figure><p>从而优化.</p><p>回答中还提到了, 与自己异或这个操作在现代处理器上有着很小的执行成本. 本文不展开深究.</p><p>这里还有一段<code>nop</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nopw   0x0(%rax,%rax,1)</span><br></pre></td></tr></table></figure><p>这里的<code>nop</code>和它的参数可能是用来填充字节以对齐.</p><p>最终我们发现二级优化生成的代码还是比一级优化的要多那么一些, 符合我们概要里面的描述.</p><h4 id="三级优化"><a href="#三级优化" class="headerlink" title="三级优化"></a>三级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:85 d2                test   %edx,%edx</span><br><span class="line">   2:48 89 f8             mov    %rdi,%rax</span><br><span class="line">   5:0f 8e 7d 02 00 00    jle    288 &lt;memcpy+0x288&gt;</span><br><span class="line">   b:48 8d 7e 10          lea    0x10(%rsi),%rdi</span><br><span class="line">   f:8d 4a ff             lea    -0x1(%rdx),%ecx</span><br><span class="line">  12:48 39 f8             cmp    %rdi,%rax</span><br><span class="line">  15:48 8d 78 10          lea    0x10(%rax),%rdi</span><br><span class="line">  19:41 0f 93 c0          setae  %r8b</span><br><span class="line">  1d:48 39 fe             cmp    %rdi,%rsi</span><br><span class="line">  20:40 0f 93 c7          setae  %dil</span><br><span class="line">  24:41 08 f8             or     %dil,%r8b</span><br><span class="line">  27:0f 84 33 02 00 00    je     260 &lt;memcpy+0x260&gt;</span><br><span class="line">  2d:83 fa 16             cmp    $0x16,%edx</span><br><span class="line">  30:0f 86 2a 02 00 00    jbe    260 &lt;memcpy+0x260&gt;</span><br><span class="line">  36:41 89 c9             mov    %ecx,%r9d</span><br><span class="line">  39:48 89 f1             mov    %rsi,%rcx</span><br><span class="line">  3c:53                   push   %rbx</span><br><span class="line">  3d:48 f7 d9             neg    %rcx</span><br><span class="line">  40:83 e1 0f             and    $0xf,%ecx</span><br><span class="line">  43:8d 79 0f             lea    0xf(%rcx),%edi</span><br><span class="line">  46:41 39 f9             cmp    %edi,%r9d</span><br><span class="line">  49:0f 82 41 02 00 00    jb     290 &lt;memcpy+0x290&gt;</span><br><span class="line">  4f:85 c9                test   %ecx,%ecx</span><br><span class="line">  51:0f 84 3e 02 00 00    je     295 &lt;memcpy+0x295&gt;</span><br><span class="line">  57:0f b6 3e             movzbl (%rsi),%edi</span><br><span class="line">  5a:83 f9 01             cmp    $0x1,%ecx</span><br><span class="line">  5d:48 8d 5e 01          lea    0x1(%rsi),%rbx</span><br><span class="line">  61:4c 8d 40 01          lea    0x1(%rax),%r8</span><br><span class="line">  65:44 8d 4a fe          lea    -0x2(%rdx),%r9d</span><br><span class="line">  69:40 88 38             mov    %dil,(%rax)</span><br><span class="line">  6c:0f 84 7e 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  72:0f b6 7e 01          movzbl 0x1(%rsi),%edi</span><br><span class="line">  76:83 f9 02             cmp    $0x2,%ecx</span><br><span class="line">  79:48 8d 5e 02          lea    0x2(%rsi),%rbx</span><br><span class="line">  7d:4c 8d 40 02          lea    0x2(%rax),%r8</span><br><span class="line">  81:44 8d 4a fd          lea    -0x3(%rdx),%r9d</span><br><span class="line">  85:40 88 78 01          mov    %dil,0x1(%rax)</span><br><span class="line">  89:0f 84 61 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  8f:0f b6 7e 02          movzbl 0x2(%rsi),%edi</span><br><span class="line">  93:83 f9 03             cmp    $0x3,%ecx</span><br><span class="line">  96:48 8d 5e 03          lea    0x3(%rsi),%rbx</span><br><span class="line">  9a:4c 8d 40 03          lea    0x3(%rax),%r8</span><br><span class="line">  9e:44 8d 4a fc          lea    -0x4(%rdx),%r9d</span><br><span class="line">  a2:40 88 78 02          mov    %dil,0x2(%rax)</span><br><span class="line">  a6:0f 84 44 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  ac:0f b6 7e 03          movzbl 0x3(%rsi),%edi</span><br><span class="line">  b0:83 f9 04             cmp    $0x4,%ecx</span><br><span class="line">  b3:48 8d 5e 04          lea    0x4(%rsi),%rbx</span><br><span class="line">  b7:4c 8d 40 04          lea    0x4(%rax),%r8</span><br><span class="line">  bb:44 8d 4a fb          lea    -0x5(%rdx),%r9d</span><br><span class="line">  bf:40 88 78 03          mov    %dil,0x3(%rax)</span><br><span class="line">  c3:0f 84 27 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  c9:0f b6 7e 04          movzbl 0x4(%rsi),%edi</span><br><span class="line">  cd:83 f9 05             cmp    $0x5,%ecx</span><br><span class="line">  d0:48 8d 5e 05          lea    0x5(%rsi),%rbx</span><br><span class="line">  d4:4c 8d 40 05          lea    0x5(%rax),%r8</span><br><span class="line">  d8:44 8d 4a fa          lea    -0x6(%rdx),%r9d</span><br><span class="line">  dc:40 88 78 04          mov    %dil,0x4(%rax)</span><br><span class="line">  e0:0f 84 0a 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  e6:0f b6 7e 05          movzbl 0x5(%rsi),%edi</span><br><span class="line">  ea:83 f9 06             cmp    $0x6,%ecx</span><br><span class="line">  ed:48 8d 5e 06          lea    0x6(%rsi),%rbx</span><br><span class="line">  f1:4c 8d 40 06          lea    0x6(%rax),%r8</span><br><span class="line">  f5:44 8d 4a f9          lea    -0x7(%rdx),%r9d</span><br><span class="line">  f9:40 88 78 05          mov    %dil,0x5(%rax)</span><br><span class="line">  fd:0f 84 ed 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 103:0f b6 7e 06          movzbl 0x6(%rsi),%edi</span><br><span class="line"> 107:83 f9 07             cmp    $0x7,%ecx</span><br><span class="line"> 10a:48 8d 5e 07          lea    0x7(%rsi),%rbx</span><br><span class="line"> 10e:4c 8d 40 07          lea    0x7(%rax),%r8</span><br><span class="line"> 112:44 8d 4a f8          lea    -0x8(%rdx),%r9d</span><br><span class="line"> 116:40 88 78 06          mov    %dil,0x6(%rax)</span><br><span class="line"> 11a:0f 84 d0 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 120:0f b6 7e 07          movzbl 0x7(%rsi),%edi</span><br><span class="line"> 124:83 f9 08             cmp    $0x8,%ecx</span><br><span class="line"> 127:48 8d 5e 08          lea    0x8(%rsi),%rbx</span><br><span class="line"> 12b:4c 8d 40 08          lea    0x8(%rax),%r8</span><br><span class="line"> 12f:44 8d 4a f7          lea    -0x9(%rdx),%r9d</span><br><span class="line"> 133:40 88 78 07          mov    %dil,0x7(%rax)</span><br><span class="line"> 137:0f 84 b3 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 13d:0f b6 7e 08          movzbl 0x8(%rsi),%edi</span><br><span class="line"> 141:83 f9 09             cmp    $0x9,%ecx</span><br><span class="line"> 144:48 8d 5e 09          lea    0x9(%rsi),%rbx</span><br><span class="line"> 148:4c 8d 40 09          lea    0x9(%rax),%r8</span><br><span class="line"> 14c:44 8d 4a f6          lea    -0xa(%rdx),%r9d</span><br><span class="line"> 150:40 88 78 08          mov    %dil,0x8(%rax)</span><br><span class="line"> 154:0f 84 96 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 15a:0f b6 7e 09          movzbl 0x9(%rsi),%edi</span><br><span class="line"> 15e:83 f9 0a             cmp    $0xa,%ecx</span><br><span class="line"> 161:48 8d 5e 0a          lea    0xa(%rsi),%rbx</span><br><span class="line"> 165:4c 8d 40 0a          lea    0xa(%rax),%r8</span><br><span class="line"> 169:44 8d 4a f5          lea    -0xb(%rdx),%r9d</span><br><span class="line"> 16d:40 88 78 09          mov    %dil,0x9(%rax)</span><br><span class="line"> 171:74 7d                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 173:0f b6 7e 0a          movzbl 0xa(%rsi),%edi</span><br><span class="line"> 177:83 f9 0b             cmp    $0xb,%ecx</span><br><span class="line"> 17a:48 8d 5e 0b          lea    0xb(%rsi),%rbx</span><br><span class="line"> 17e:4c 8d 40 0b          lea    0xb(%rax),%r8</span><br><span class="line"> 182:44 8d 4a f4          lea    -0xc(%rdx),%r9d</span><br><span class="line"> 186:40 88 78 0a          mov    %dil,0xa(%rax)</span><br><span class="line"> 18a:74 64                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 18c:0f b6 7e 0b          movzbl 0xb(%rsi),%edi</span><br><span class="line"> 190:83 f9 0c             cmp    $0xc,%ecx</span><br><span class="line"> 193:48 8d 5e 0c          lea    0xc(%rsi),%rbx</span><br><span class="line"> 197:4c 8d 40 0c          lea    0xc(%rax),%r8</span><br><span class="line"> 19b:44 8d 4a f3          lea    -0xd(%rdx),%r9d</span><br><span class="line"> 19f:40 88 78 0b          mov    %dil,0xb(%rax)</span><br><span class="line"> 1a3:74 4b                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1a5:0f b6 7e 0c          movzbl 0xc(%rsi),%edi</span><br><span class="line"> 1a9:83 f9 0d             cmp    $0xd,%ecx</span><br><span class="line"> 1ac:48 8d 5e 0d          lea    0xd(%rsi),%rbx</span><br><span class="line"> 1b0:4c 8d 40 0d          lea    0xd(%rax),%r8</span><br><span class="line"> 1b4:44 8d 4a f2          lea    -0xe(%rdx),%r9d</span><br><span class="line"> 1b8:40 88 78 0c          mov    %dil,0xc(%rax)</span><br><span class="line"> 1bc:74 32                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1be:0f b6 7e 0d          movzbl 0xd(%rsi),%edi</span><br><span class="line"> 1c2:83 f9 0f             cmp    $0xf,%ecx</span><br><span class="line"> 1c5:48 8d 5e 0e          lea    0xe(%rsi),%rbx</span><br><span class="line"> 1c9:4c 8d 40 0e          lea    0xe(%rax),%r8</span><br><span class="line"> 1cd:44 8d 4a f1          lea    -0xf(%rdx),%r9d</span><br><span class="line"> 1d1:40 88 78 0d          mov    %dil,0xd(%rax)</span><br><span class="line"> 1d5:75 19                jne    1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1d7:0f b6 7e 0e          movzbl 0xe(%rsi),%edi</span><br><span class="line"> 1db:48 8d 5e 0f          lea    0xf(%rsi),%rbx</span><br><span class="line"> 1df:4c 8d 40 0f          lea    0xf(%rax),%r8</span><br><span class="line"> 1e3:44 8d 4a f0          lea    -0x10(%rdx),%r9d</span><br><span class="line"> 1e7:40 88 78 0e          mov    %dil,0xe(%rax)</span><br><span class="line"> 1eb:0f 1f 44 00 00       nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 1f0:29 ca                sub    %ecx,%edx</span><br><span class="line"> 1f2:41 89 ca             mov    %ecx,%r10d</span><br><span class="line"> 1f5:31 ff                xor    %edi,%edi</span><br><span class="line"> 1f7:41 89 d3             mov    %edx,%r11d</span><br><span class="line"> 1fa:4c 01 d6             add    %r10,%rsi</span><br><span class="line"> 1fd:31 c9                xor    %ecx,%ecx</span><br><span class="line"> 1ff:41 c1 eb 04          shr    $0x4,%r11d</span><br><span class="line"> 203:49 01 c2             add    %rax,%r10</span><br><span class="line"> 206:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 20d:00 00 00 </span><br><span class="line"> 210:66 0f 6f 04 0e       movdqa (%rsi,%rcx,1),%xmm0</span><br><span class="line"> 215:83 c7 01             add    $0x1,%edi</span><br><span class="line"> 218:41 0f 11 04 0a       movups %xmm0,(%r10,%rcx,1)</span><br><span class="line"> 21d:48 83 c1 10          add    $0x10,%rcx</span><br><span class="line"> 221:41 39 fb             cmp    %edi,%r11d</span><br><span class="line"> 224:77 ea                ja     210 &lt;memcpy+0x210&gt;</span><br><span class="line"> 226:89 d7                mov    %edx,%edi</span><br><span class="line"> 228:83 e7 f0             and    $0xfffffff0,%edi</span><br><span class="line"> 22b:89 fe                mov    %edi,%esi</span><br><span class="line"> 22d:41 29 f9             sub    %edi,%r9d</span><br><span class="line"> 230:49 8d 0c 30          lea    (%r8,%rsi,1),%rcx</span><br><span class="line"> 234:48 01 de             add    %rbx,%rsi</span><br><span class="line"> 237:39 fa                cmp    %edi,%edx</span><br><span class="line"> 239:74 22                je     25d &lt;memcpy+0x25d&gt;</span><br><span class="line"> 23b:45 8d 41 01          lea    0x1(%r9),%r8d</span><br><span class="line"> 23f:31 d2                xor    %edx,%edx</span><br><span class="line"> 241:0f 1f 80 00 00 00 00 nopl   0x0(%rax)</span><br><span class="line"> 248:0f b6 3c 16          movzbl (%rsi,%rdx,1),%edi</span><br><span class="line"> 24c:40 88 3c 11          mov    %dil,(%rcx,%rdx,1)</span><br><span class="line"> 250:48 83 c2 01          add    $0x1,%rdx</span><br><span class="line"> 254:44 89 c7             mov    %r8d,%edi</span><br><span class="line"> 257:29 d7                sub    %edx,%edi</span><br><span class="line"> 259:85 ff                test   %edi,%edi</span><br><span class="line"> 25b:7f eb                jg     248 &lt;memcpy+0x248&gt;</span><br><span class="line"> 25d:5b                   pop    %rbx</span><br><span class="line"> 25e:c3                   retq   </span><br><span class="line"> 25f:90                   nop</span><br><span class="line"> 260:48 83 c1 01          add    $0x1,%rcx</span><br><span class="line"> 264:31 d2                xor    %edx,%edx</span><br><span class="line"> 266:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 26d:00 00 00 </span><br><span class="line"> 270:0f b6 3c 16          movzbl (%rsi,%rdx,1),%edi</span><br><span class="line"> 274:40 88 3c 10          mov    %dil,(%rax,%rdx,1)</span><br><span class="line"> 278:48 83 c2 01          add    $0x1,%rdx</span><br><span class="line"> 27c:48 39 ca             cmp    %rcx,%rdx</span><br><span class="line"> 27f:75 ef                jne    270 &lt;memcpy+0x270&gt;</span><br><span class="line"> 281:f3 c3                repz retq </span><br><span class="line"> 283:0f 1f 44 00 00       nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 288:f3 c3                repz retq </span><br><span class="line"> 28a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 290:48 89 c1             mov    %rax,%rcx</span><br><span class="line"> 293:eb a6                jmp    23b &lt;memcpy+0x23b&gt;</span><br><span class="line"> 295:48 89 f3             mov    %rsi,%rbx</span><br><span class="line"> 298:49 89 c0             mov    %rax,%r8</span><br><span class="line"> 29b:e9 50 ff ff ff       jmpq   1f0 &lt;memcpy+0x1f0&gt;</span><br></pre></td></tr></table></figure><p>非人类可读代码, 不予评述.</p><p>这个优化级别下代码量明显增多, 猜想是gcc采用空间换时间的策略. </p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><p>主函数没有实际的意义, 仅供测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span>* str = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(str,<span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>* new_str = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(new_str,str,<span class="number">1024</span>);<span class="comment">// customized memcpy() here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令(主函数关闭优化)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o memcpy_test.o memcpy_test.c</span><br><span class="line">gcc -o <span class="built_in">test</span> memcpy_test.o memcpy.o</span><br></pre></td></tr></table></figure><p>使用linux下的<code>time</code>命令测得(单位:秒)</p><table><thead><tr><th style="text-align:center">优化级别</th><th style="text-align:center">real</th><th style="text-align:center">user</th><th style="text-align:center">sys</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">6.084</td><td style="text-align:center">4.792</td><td style="text-align:center">1.292</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2.602</td><td style="text-align:center">1.306</td><td style="text-align:center">1.290</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2.450</td><td style="text-align:center">1.195</td><td style="text-align:center">1.250</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1.770</td><td style="text-align:center">0.498</td><td style="text-align:center">1.268</td></tr></tbody></table><p>从上表可以看出优化级别越高, 执行速度越快. 虽然三级优化生成的代码长度明显变大, 但是性能确实最优.</p><p>优化级别1-2差别并不是很大 - 不仅从运行速度上来看, 从代码的角度看两者也相差无几.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/11/02/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>A Example of Docker in Reality</title>
      <link>https://hisenz.com/2018/10/14/A-Example-of-Docker-in-Reality/</link>
      <guid>https://hisenz.com/2018/10/14/A-Example-of-Docker-in-Reality/</guid>
      <pubDate>Sun, 14 Oct 2018 08:19:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;The docker on Linux allows easy deployment of software. However, the idea is mainly borrowed from CD ROM. &lt;/p&gt;
&lt;p&gt;People used to buy CD disks and put them in to the drive. Whatever brand your computer is, the content (music files, portable softwares) are always available. Such a design saves cost for two reasons: &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The docker on Linux allows easy deployment of software. However, the idea is mainly borrowed from CD ROM. </p><p>People used to buy CD disks and put them in to the drive. Whatever brand your computer is, the content (music files, portable softwares) are always available. Such a design saves cost for two reasons: </p><a id="more"></a><ol><li>A single release satisfy most of environment;</li><li>Less to learn to operate a standard equipment.</li></ol><p>Now we replace the physical disk with image files and virtualize the CD drive - you can hardly find them nowadays anyway - to fit the growth of the Internet. The distribution cost turns much lower because binaries could be delivered through cables.</p><p>As HFLS Developer Association is a IT club, I tried to make these <a href="/2017/10/30/Elementary-Programming-Study-Package/">“images” of our course</a> in hope that these images can be deployed by other high school IT clubs in need. This works exactly the same as the CD drive example.</p><p>The Cambridge A LEVEL Centers works in this way as well. Many courses are made into packages, and the cooperating school would choose some of these “images” to run. In this manner the A LEVEL’s market share expands rapidly.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/10/14/A-Example-of-Docker-in-Reality/#disqus_thread</comments>
    </item>
    
    <item>
      <title>P.A.E. | Paper Assembly Engine</title>
      <link>https://hisenz.com/2018/07/24/P-A-E-The-Paper-Assembly-Engine/</link>
      <guid>https://hisenz.com/2018/07/24/P-A-E-The-Paper-Assembly-Engine/</guid>
      <pubDate>Tue, 24 Jul 2018 08:07:08 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;We liberate millions of students and teachers from exam-oriented education by reducing attention and time dissipated on training, with the solution entirely directed by mathematical models.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;– Hisen Zhang&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>We liberate millions of students and teachers from exam-oriented education by reducing attention and time dissipated on training, with the solution entirely directed by mathematical models.</p><p><em>– Hisen Zhang</em></p></blockquote><a id="more"></a><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h3 id="The-Problems"><a href="#The-Problems" class="headerlink" title="The Problems"></a>The Problems</h3><h4 id="What-is-the-Problem"><a href="#What-is-the-Problem" class="headerlink" title="What is the Problem"></a>What is the Problem</h4><ol><li>A lot of wastes for printed past paper booklet</li><li>Great difficulty to make up a paper for internal assessment</li><li>No focus for students while practicing</li></ol><h4 id="Our-Objectives"><a href="#Our-Objectives" class="headerlink" title="Our Objectives"></a>Our Objectives</h4><ol><li>Reduced wastes</li><li>An easier life for teachers</li><li>and students.</li></ol><h4 id="How-We-Achieve-it"><a href="#How-We-Achieve-it" class="headerlink" title="How We Achieve it"></a>How We Achieve it</h4><ol><li>Digitize quiz bank</li><li>Automate paper make up process</li><li>Introduce AI Director</li></ol><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h4 id="Q1-What-is-P-A-E"><a href="#Q1-What-is-P-A-E" class="headerlink" title="Q1 : What is P.A.E.?"></a>Q1 : What is P.A.E.?</h4><blockquote><p>An AI directed question paper assembler. P.A.E. stands for “Paper Assembly Engine”.</p><p>Students may use it for exam-training and teachers are allowed to learn about their student’s progress. </p></blockquote><h4 id="Q2-What’s-Special"><a href="#Q2-What’s-Special" class="headerlink" title="Q2 : What’s Special?"></a>Q2 : What’s Special?</h4><blockquote><p>The entire process is directed by Artificial Intelligence. </p><p>Although many digital quiz banks seem to be handy, a traditional quiz bank requires user to select questions manually. Unlike other quiz banks (such as the one offered by <a href="https://ibo.org/#" target="_blank" rel="noopener">THE INTERNATIONAL BACCALAUREATE®</a>), our system enables 100% automated process, from selection to assembly to response collection. This feature is achieved by the <code>Data Flow Cycle</code>, a fundamental idea introduced later in this chapter.</p></blockquote><h3 id="About-the-System"><a href="#About-the-System" class="headerlink" title="About the System"></a>About the System</h3><p>To understand the complete system, it would be better to first get familiar with the data flow loop between three main subsystems. </p><h4 id="The-Data-Flow-Cycle"><a href="#The-Data-Flow-Cycle" class="headerlink" title="The Data Flow Cycle"></a>The Data Flow Cycle</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYnOLF.png" alt="system_loop"></p><p>The entire system consists of three subsystems: AI Director, Assembly Engine, and User Interface. </p><p>The data work cycle works like this:</p><ul><li>The <code>AI Director</code> generates weights depending on feedback. </li><li>The <code>Assembly Engine</code> assembles question papers referring to the weights. </li><li>The <code>User Interface</code> Displays papers assembled and create feedback. </li></ul><p><strong>Note:</strong> Chapter 2 describes the three subsystems in details.</p><h4 id="The-Complete-System"><a href="#The-Complete-System" class="headerlink" title="The Complete System"></a>The Complete System</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYy7M6.png" alt="complete_system2"></p><p>Beside the subsystems, other components are labeled in the diagram above. The input of the system is the past paper published on the Internet. The output has two parts: the generated question paper and the AI reports. </p><h5 id="Past-Paper"><a href="#Past-Paper" class="headerlink" title="Past Paper"></a>Past Paper</h5><p>For this program, the A-Level series question paper published by Cambridge International Examination is applied. They are available to qualified centers and teachers.</p><h5 id="Question-Paper"><a href="#Question-Paper" class="headerlink" title="Question Paper"></a>Question Paper</h5><p>The <code>User Interface</code> sends AJAX requests to the API. The return is in JSON. Then the Javascript code in user’s browser refreshes the web page partially. </p><p>The question paper is presented in HTML.</p><h5 id="AI-Report"><a href="#AI-Report" class="headerlink" title="AI Report"></a>AI Report</h5><p>AI report is both available to students and teacher. The contents are generated for two groups of users respectively. For students, this report details their strength and weakness; for teachers, this shows the overall statistics in the system, and a specific profile for each student as well.</p><h5 id="Quiz-Bank"><a href="#Quiz-Bank" class="headerlink" title="Quiz Bank"></a>Quiz Bank</h5><p>In this project, the quiz bank is implemented with <code>sqlite3</code>. The database is light enough to operate and stable enough to keep the questions. </p><p>In most cases, the database is read-only. When multi-user feature works, another database for storing account data should be deployed separately.</p><p>Both <code>Assembly Engine</code> or <code>AI Director</code> may access to the quiz bank.</p><h4 id="Components’-Visibility"><a href="#Components’-Visibility" class="headerlink" title="Components’ Visibility"></a>Components’ Visibility</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYnvdJ.png" alt="visibility"></p><p>Only the User Interface is visible to the users. The rest parts are running in the background. Communication across the line of visibility is implemented with HTTP restful API.</p><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Assembly-Engine"><a href="#Assembly-Engine" class="headerlink" title="Assembly Engine"></a>Assembly Engine</h3><p>The assembly engine takes weights as input. The questions selected are based on weights on different topics. The output is transmitted in JSON via the API. </p><p>There are different modes for assembly engine to run. The mode is specified implicitly (or explicitly in some occasions) with the parameters passed to the API. </p><p>The interfaces and usage are listed below:</p><table><thead><tr><th style="text-align:center">Interface</th><th style="text-align:center">Method</th><th style="text-align:center">Parameter</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">/paper/</td><td style="text-align:center">[GET]</td><td style="text-align:center">topic_keyword, similar_to</td><td style="text-align:center">If topic_keyword is specified, fetch the questions with the keyword; else select the questions most similar to the value.</td></tr></tbody></table><h3 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface"></a>User Interface</h3><p>The user interface takes the JSON from paper information to render them in the web page. When users type command into the search bar, the Javascript code loaded into user’s web browser will send AJAX requests to the back end. The API server at the back end calls the assembly engine and response with the information of question in JSON.</p><p><strong>Sample Response</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"citation"</span>: <span class="number">0</span>, </span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">24</span>, </span><br><span class="line">    <span class="attr">"op_a"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_b"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_c"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_d"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"paper"</span>: <span class="string">"13"</span>, </span><br><span class="line">    <span class="attr">"q_ans"</span>: <span class="string">"A"</span>, </span><br><span class="line">    <span class="attr">"q_content"</span>: <span class="string">"26 Which statement about waves is correct?\n\nA All electromagnetic waves travel at the same speed in a vacuum..."</span>, </span><br><span class="line">    <span class="attr">"q_num"</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="attr">"q_path"</span>: <span class="string">"data/cropped/9702_w14_qp_13_17_1.png"</span>, </span><br><span class="line">    <span class="attr">"quality"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"season"</span>: <span class="string">"w"</span>, </span><br><span class="line">    <span class="attr">"subject"</span>: <span class="string">"9702"</span>, </span><br><span class="line">    <span class="attr">"vector"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"wrong"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"year"</span>: <span class="string">"14"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Explanation to some important fields:</p><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">citation</td><td style="text-align:center">int</td><td style="text-align:center">How many times the question is referred</td></tr><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">The unique id of the question in the quiz bank</td></tr><tr><td style="text-align:center">q_ans</td><td style="text-align:center">string</td><td style="text-align:center">The answer to the question</td></tr><tr><td style="text-align:center">q_path</td><td style="text-align:center">string</td><td style="text-align:center">Add this to the images’ <code>src</code> attribute</td></tr><tr><td style="text-align:center">quality</td><td style="text-align:center">int</td><td style="text-align:center">The mark for quality. Currently reserved.</td></tr></tbody></table><h3 id="AI-Director"><a href="#AI-Director" class="headerlink" title="AI Director"></a>AI Director</h3><p>The main role played by AI Director is to decide which question to be selected from the quiz bank. </p><h4 id="Pre-Processor"><a href="#Pre-Processor" class="headerlink" title="Pre-Processor"></a>Pre-Processor</h4><p>Since the quiz bank is designed to be updated once a season, it does not make sense to run AI codes over the quiz bank over and over. The idea here is to pre-process through all records in the database and store this information (mainly matrices) on the disk. This method also accelerates the process for question selecting since the decision is made by referring to the matrices with calculated values.</p><p>There will be more introduction to this component in later chapters.</p><h3 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h3><h4 id="Cutter"><a href="#Cutter" class="headerlink" title="Cutter"></a>Cutter</h4><p>The cutter is responsible for cutting the images of questions and fetch their answers from the input, which is the past paper in PDF format, and append these data into the database. </p><p>The cutter should be an important component (or, subsystem). However, since this part of the program is highly curriculum related, and only little usage of this function (the update interval is supposed to be 4 months or so), I decided to classify this function as an accessory.</p><p>By the way, this part takes a great portion of time over the development.</p><h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><p>Most algorithms applied in this program are included in the pre-processor. </p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>This method lowers the weights for stopwords (i.e. “and”,”the”) and therefore it highlights the featured words. Sorting these words gives a keyword list used to generate word vectors.</p><h3 id="Cosine-Similarity"><a href="#Cosine-Similarity" class="headerlink" title="Cosine Similarity"></a>Cosine Similarity</h3><p>The cosine distance applies to vectors in spaces with more than three dimensions as well. This made it possible to calculate the similarity between two vectors. The result of cosine distance gets closer to zero if two vectors are more alike. The similarity is defined by $1-\cos\theta$. </p><p>Therefore the difficulty is to generate a vector for each question: and such a vector must be able to display the feature of that question. An assumption is made: the words appeared in the text do have a strong connection to the topic behind. For instance, the word “spring” will come along with the topic “elastic deformation”. </p><h3 id="ISODATA-amp-K-Means"><a href="#ISODATA-amp-K-Means" class="headerlink" title="ISODATA &amp; K-Means"></a>ISODATA &amp; K-Means</h3><p>K-Means clustering works based on Euclidean distance. With the given number of K, the output of this algorithm is the K cluster, Such a method is very straightforward.</p><p>However, this is also the problem. Although only once hyperparameter needs to be specified, The value of K is difficult to decide. In practical, the K is often decided arbitrarily.</p><p>As an improvement to the K-Means algorithm, Iterative Self-Organizing Data Analysis Technique will refer to the K value given, but modify the value during the process as well. This is achieved by splitting and merging the clusters once  according to the following conditions:</p><ul><li>If the standard deviation within a cluster exceeds $\theta_{split}$</li><li>If the distance between two centroids are closer than $\theta_{merge}$</li><li>etc.</li></ul><h2 id="Innovations"><a href="#Innovations" class="headerlink" title="Innovations"></a>Innovations</h2><h3 id="Introduction-to-Innovations"><a href="#Introduction-to-Innovations" class="headerlink" title="Introduction to Innovations"></a>Introduction to Innovations</h3><p>While programming this system, some functions already integrated into standard or third-party modules do not fit my case perfectly. For instance, I first planned to use CSV (comma separated values) to store the matrix of cosine similarity. However, storing in text not only occupies large storage space but also has a loss in data precision. Therefore I defined a type of file to store this matrix efficiently.</p><h3 id="CSM-Cosine-Similarity-Matrix-storage"><a href="#CSM-Cosine-Similarity-Matrix-storage" class="headerlink" title="CSM: Cosine Similarity Matrix storage"></a>CSM: Cosine Similarity Matrix storage</h3><p>As suggested in earlier chapter, the matrix of cosine similarity looks like this:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.2432432</span>],</span><br><span class="line"> [<span class="number">0.2343243</span>,<span class="number">0.0783058</span>],</span><br><span class="line"> [<span class="number">0.0</span>,<span class="number">0.003256</span>,<span class="number">0.18034235</span>]]</span><br></pre></td></tr></table></figure></p><p>The calculated cosine similarity matrix is symmetrical. This means it is possible to cut the size in half when it comes to storage, whether in the memory or on the disk. To be precise, the actual elements required to restore a complete n by n matrix is:</p><p>$$\frac {1}{2}n (n-1)$$</p><p>In this case, the values are in the type of float. Each float element has the size of 4 bytes. Therefore the total size of the file is $2n(n-1)$ bytes.</p><p>The built-in function in Python repr() convert the objects in strings, and they can be restored to object with eval(). However, float data here must experience loss in precision because the data is rounded to some digits for saving storage space. </p><p>The comparison below may show how the solution makes a difference. Rounded to 5 digits, a “float” stored in string occupies 8 bytes on average (with “0.” and a comma). n is the dimension of the matrix. </p><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">CSM</th><th style="text-align:center">Round(5)</th><th style="text-align:center">Round(8)</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">19.8 KB</td><td style="text-align:center">39.6 KB</td><td style="text-align:center">54.5 KB</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">2 MB</td><td style="text-align:center">4 MB</td><td style="text-align:center">5.5 MB</td></tr><tr><td style="text-align:center">10000</td><td style="text-align:center">200 MB</td><td style="text-align:center">400 MB</td><td style="text-align:center">550 MB</td></tr></tbody></table><p>Some advantages of applying CSM format:</p><ul><li><p>No loss in data precision</p></li><li><p>More compact storage</p></li></ul><p>In reality, the first 12 bytes are reserved for storing the dimension of the matrix and the values on the symmetrical axis. The following table shows the header of <code>smc</code> files.</p><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Size</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">SIZE</td><td style="text-align:center">unsigned long</td><td style="text-align:center">8</td><td style="text-align:center">Dimension</td></tr><tr><td style="text-align:center">SYM_VAL</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">Values on the symmetrical axis</td></tr><tr><td style="text-align:center">DATA</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">Elements in the matrix</td></tr></tbody></table><h3 id="ISODATA-Python-Module"><a href="#ISODATA-Python-Module" class="headerlink" title="ISODATA Python Module"></a>ISODATA Python Module</h3><p>Some projects like PyRadar do integrate the function of ISODATA clustering for image processing. However, there is not a ISODATA library for general purposes. Therefore I started to implement the code from scratch. For making the life easier for other programmers, I decide to make it publicly available. </p><p>This module is for general purposes by allowing vectors as input and the vectors in clusters as output. </p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="“I-have-a-Dream”"><a href="#“I-have-a-Dream”" class="headerlink" title="“I have a Dream”"></a>“I have a Dream”</h3><blockquote><p>I have a dream.</p><p>I have a dream, that students may have some spare time, doing some coolest things with coolest people. This project helps by raising the efficiency of training. </p><p>I have a dream, that teachers don’t have to study for the exams, but to study in the fields they are talented. P.A.E. automate this process with machine learning. </p><p>I have a dream, that students may join pure project-based study, instructed by their teachers, instead of being prisoned by examinations…</p><p>I have a dream.</p></blockquote><h3 id="Limitations-and-Improvements"><a href="#Limitations-and-Improvements" class="headerlink" title="Limitations and Improvements"></a>Limitations and Improvements</h3><h4 id="Postulates"><a href="#Postulates" class="headerlink" title="Postulates"></a>Postulates</h4><p>This system is designed to be valid based on these following ‘believed-to-be-true’ statements:</p><ul><li>“Practice makes perfect.”</li><li>The keywords show some features of the text.</li></ul><p>So far these postulates are widely validated. However, no solid shreds of evidence suggest they are truth. In other words, if these statements are proved to be wrong, the system may not be effective as it was proposed.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/07/24/P-A-E-The-Paper-Assembly-Engine/#disqus_thread</comments>
    </item>
    
    <item>
      <title>墙外应用/网站指南</title>
      <link>https://hisenz.com/2018/05/27/%E5%A2%99%E5%A4%96%E5%BA%94%E7%94%A8/%E7%BD%91%E7%AB%99%E6%8C%87%E5%8D%97/</link>
      <guid>https://hisenz.com/2018/05/27/%E5%A2%99%E5%A4%96%E5%BA%94%E7%94%A8/%E7%BD%91%E7%AB%99%E6%8C%87%E5%8D%97/</guid>
      <pubDate>Sun, 27 May 2018 04:21:14 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;这份指南及其附带的列表长期更新, 欢迎在评论区留言贡献．&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你能看到这篇文章, 说明你已经身在高墙之外, 或者开始在向往高墙之外的生活了. 无论是前者还是后者, 希望这篇文章都能给你一些启发.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>这份指南及其附带的列表长期更新, 欢迎在评论区留言贡献．</p></blockquote><p>如果你能看到这篇文章, 说明你已经身在高墙之外, 或者开始在向往高墙之外的生活了. 无论是前者还是后者, 希望这篇文章都能给你一些启发.</p><a id="more"></a><h2 id="暗淡的前途"><a href="#暗淡的前途" class="headerlink" title="暗淡的前途"></a>暗淡的前途</h2><p>为什么要追逐自由的互联网? 很多人出去只是为了看看世界, 顺带着把国内一套的习惯带了出去. 受国内垃圾大厂们的影响, 电子娱乐生活不外乎追剧刷微博逛知乎. 在一小撮别有用心的人看来, 用无聊至极的娱乐占据生活可以维护社会和国家的稳定. 大脑最喜欢简单粗暴的快乐, 因为这不用花任何功夫去思考. 失去严肃思考能力的恶果, 已在社会上初步展现: 近年来发生的一系列事件, 想必我不用一一例举.</p><h2 id="警惕”合法化”的外衣"><a href="#警惕”合法化”的外衣" class="headerlink" title="警惕”合法化”的外衣"></a>警惕”合法化”的外衣</h2><p>什么网络主权, 不过是把不合理的事物以法律的名义披上了合法的外衣, 大行其道.</p><p>有人说, 你们这是违法的行为. 试问, 二战德国歧视犹太人违法吗? 完全合法! 二战前的纳粹德国以<code>完全合法</code>的程序通过了<code>不合理</code>的法律, 把歧视犹太人包装成了”正义”的价值观. 历史总是惊人的相似. 网络主权等极其荒谬的事物被合法化, 前途的悲哀完全可以预见.</p><h2 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h2><p>人们被剥夺的思考能力, 我们试着在墙外找回来.</p><p>得益与互联网, 知识的传播成本不断下降, 我们比历史上任何一代人都接受到更多更丰富的信息, 海量的同时也同样意味着内容的质量参差不齐. 娱乐消遣绝非不可, 但是对于低俗与质量不高的内容, 请自觉抵制. 你贡献的点击量只会使内容的粗制滥造者更加猖獗. </p><p>同样请花一些时间了解一些技术, 这是未来乃至当前非常重要的议题. 即使你对此不感兴趣, 也该花一点点的时间从大致上了解事物是如何工作的. 我国的软件工业就是因为用户非常懒, 不愿拿出一点点的时间和精力来学习, 大肆推出各种”全家桶”, 发动3Q大战, 搞得国内局域网乌烟瘴气, 最终受害的还是用户自己.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>提高自身知识水平, 警惕娱乐至死.</p><blockquote><p>God helps those who help themselves.<br>上帝只会帮助那些自救的人们.</p></blockquote><h2 id="附-网站-应用列表"><a href="#附-网站-应用列表" class="headerlink" title="附: 网站/应用列表"></a>附: 网站/应用列表</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>Google</td><td>自由的商业搜索引擎</td></tr><tr><td>DuckDuckGo</td><td>简洁,匿名,安全</td></tr></tbody></table><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>Telegram</td><td>自由 安全的即时通讯平台</td></tr><tr><td>Line</td><td>即时通讯软件</td></tr><tr><td>Messenger</td><td>Facebook出品</td></tr></tbody></table><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>Facebook</td><td>全球最大熟人社交社区</td></tr><tr><td>Twitter</td><td>微博替代品</td></tr><tr><td>Instagram</td><td>图片社交</td></tr></tbody></table><h3 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>GitHub</td><td>开源代码托管平台</td></tr><tr><td>StackOverflow</td><td>技术问答社区</td></tr><tr><td>readthedoc</td><td>技术文档托管网站</td></tr><tr><td>Codecademy</td><td>任务型编程入门</td></tr></tbody></table><h3 id="学术"><a href="#学术" class="headerlink" title="学术"></a>学术</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>SciHub</td><td>免费的学术论文站</td></tr><tr><td>Khan Academy</td><td>可汗学院</td></tr></tbody></table><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>Youtube</td><td>全球最大视频站</td></tr><tr><td>IMDB</td><td>影视数据库　</td></tr></tbody></table><h3 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>Gmail</td><td>Google邮箱服务</td></tr><tr><td>ProtonMail</td><td>Secure Mail</td></tr></tbody></table><h3 id="匿名"><a href="#匿名" class="headerlink" title="匿名"></a>匿名</h3><table><thead><tr><th>应用/网站</th><th>备注</th></tr></thead><tbody><tr><td>FakeNameGenerator</td><td>产生匿名身份&amp;邮箱</td></tr><tr><td>BitCoin</td><td>匿名加密货币</td></tr></tbody></table>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/05/27/%E5%A2%99%E5%A4%96%E5%BA%94%E7%94%A8/%E7%BD%91%E7%AB%99%E6%8C%87%E5%8D%97/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Fly Me to the Moon</title>
      <link>https://hisenz.com/2018/05/24/Fly-me-to-the-moon/</link>
      <guid>https://hisenz.com/2018/05/24/Fly-me-to-the-moon/</guid>
      <pubDate>Thu, 24 May 2018 12:36:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Poets often use many words&lt;br&gt;to say a simple thing&lt;br&gt;It takes thought and time and rhyme&lt;br&gt;to make a poem sing&lt;br&gt;With music and words
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Poets often use many words<br>to say a simple thing<br>It takes thought and time and rhyme<br>to make a poem sing<br>With music and words I’m playing<br>For you I have written this song<br>To be sure<br>that you know what I’m saying<br>I will translate as I go along</p><hr><p>Fly me to the moon<br>远走高飞<br>and let me play among the stars<br>我们遨游星河<br>Let me see what spring is like<br>在遥远的星星上<br>on Jupiter and Mars<br>又有着怎样的春光<br>In other words<br>今日<br>Hold my hands<br>执子之手<br>In other words<br>只愿<br>Daring kiss me<br>与子偕老<br>Fill my heart with song<br>沉浸于音乐<br>and let me sing forever more<br>我纵声放歌<br>You are all I long for<br>只为一人<br>all I worship and adore<br>那唯一的爱慕<br>In other words<br>啊<br>please be true<br>让这一切成真<br>In other words<br>低吟浅唱着<br>I love you<br>“我喜欢你.”</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/05/24/Fly-me-to-the-moon/#disqus_thread</comments>
    </item>
    
    <item>
      <title>二维码的抽象特征分析</title>
      <link>https://hisenz.com/2018/04/21/QR-Code/</link>
      <guid>https://hisenz.com/2018/04/21/QR-Code/</guid>
      <pubDate>Sat, 21 Apr 2018 03:40:45 GMT</pubDate>
      <description>
      
        &lt;p&gt;在我们之前的文章, 里面提到了想要拓展二维码的功能, 就要首先对二维码这事物进行抽象. 那么今天这篇文章里面让我们来详细探讨一下, 以二维码为例, 如何对一个事物进行抽象从而分析其特征.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在我们之前的文章, 里面提到了想要拓展二维码的功能, 就要首先对二维码这事物进行抽象. 那么今天这篇文章里面让我们来详细探讨一下, 以二维码为例, 如何对一个事物进行抽象从而分析其特征.</p><a id="more"></a><h2 id="光学承载体"><a href="#光学承载体" class="headerlink" title="光学承载体"></a>光学承载体</h2><p>首先我们从日常生活中遇到的二维码出发, 在日常生活中二维码主要包含了链接公众号以及其他的一些信息. 从内容当中我们可以看出二维码在日常生活中充当的角色是<code>以矩阵存取信息的光学承载体</code>. </p><p>生活中还有哪些常见的信息存在体呢? 很简单, 语言文字就是其中的一种 – 当我们把一句话, 一个想法, 一个观点用文字记录在纸上的时候, 纸上的这些文字就成了我们信息的承载体. </p><p>由于信息这一概念本身是抽象, 因此它的存在需要有一个具象的实体来承载. 荷载<code>load</code>是信息, 承载体/媒介<code>media</code>则把load调制<code>modulate</code>后具象的表达出来. </p><p>说是<strong>光学</strong>承载体的原因在于他和文字同样是存在于印刷品上的. 如果一个人失明了, 他就无法直接读出纸上的文字, 而是要通过其他的方法(盲文 - 触觉/请他人朗读 - 声信号). 当然, 采用光学作为存取的方法有很多的好处, 比方说:</p><ol><li>它的制作成本低廉. 人类的印刷技术已经达到了一个相对发达的水平, 印刷光学材料随处可觅, 已经非常的廉价.</li><li>其灵活性允许了动态二维码的出现. 这一点将在稍后讨论. </li></ol><h2 id="人机的可读写性"><a href="#人机的可读写性" class="headerlink" title="人机的可读写性"></a>人机的可读写性</h2><p>广义上的二维码还涵盖了很多, 比方说选择题的涂卡卷就是一种稀疏的二维码, 早期计算机编程用的程序卡也是一种二维码. 那么语言文字和二维码之间有什么样的不同呢？语言文字是可读的, 是人类可读写的. 当你看到一句话的时候, 你可以立刻理解其中的含义, 但是二维码并非人类可读. 难道你有自动扫码的功能吗？相比之下, 二维码是机器可读写的 – 机器可以轻松识别或生成二维码. </p><p>到目前为止, 我们已经把二维码从一个矩阵抽象到了信息的承载体, 进而在信息媒介的基础上分析除了二维码的一大特征 – 机器可读. 现在让我们继续分析. </p><h2 id="动态静态-主动被动"><a href="#动态静态-主动被动" class="headerlink" title="动态静态 主动被动"></a>动态静态 主动被动</h2><p>在支付宝应用动态码之前, 所有的二维码都是印刷的印刷品质上的. 也就是静态的, 一旦被确定后里面的内容无法改变. 而作为机器, 虽然说识别出来的信息是一定的, 但是我们的处理方式上却可以动态改变, 因此二维码在印刷端, 也就是作为一种媒介的时候, 是静态的被动的. 但是二维码在解析的时候, 是作为一种动态的积极的存在. </p><p>由于解析端是动态的积极的, 因此我们在这一个方面上做出了很多的应用. 比方说二维码里面包含的是一个链接时候, 我们就会默认用浏览器加载出这个网页. 如果这个URL指向的是另外的协议<code>scheme</code>, 比方说<code>wxp://</code>, 则会跳转到微信里进行进一步的操作, 因此整个解析的过程是动态的积极的. </p><p>这里需要注意一点并不是每个二维码里面都必须包含有一个URL, 也不是所有的二维码软件在扫描到URL的时候都会默认的打开浏览器去加载这个网页, 毕竟二维码含有的只是信息. 而至于对这一段信息如何进行处理？这是后话. 有些软件会选择打开浏览器, 而有些软件直接显示出这一个链接而不做跳转.</p><p>这一特性使得二维码, 或者说较之更为传统的条码在工业应用上获得了巨大的成功. 在大规模工业生产<code>mass production</code>里面采用流水号来管理, 这种想法很早以前就已经被提出来了. 但是真正被大规模的应用时间还是在条码的发明以后, 因为当一个产品被制造出来, 并分配到流水号的时候, 这个ID并没有去被改变的需要, 因此二维码作为一种静态的媒介在这一个领域里发挥了重大的作用. 我们现在的世界已经无法离开条码了: 你可以想象物流公司一个一个手抄快递单号进行订单的追踪吗？</p><p>动态二维码的诞生改变了这一主动和被动的关系. 每个二维码仍然是静态的, 但是由于电子屏幕可以刷新, 二维码可以被改变. 这时候二维码已经不再单单是一种信息的承载了. 事实上, 这个时候二维码已经成为了一种接口<code>Interface</code>, 一种连接机器和机器的接口, 一台机器产生二维码, 由另一台机器读取.（你手绘个二维码？）</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>二维码有着广泛的应用. 但是如果想要发掘二维码的更多有趣应用, 对其特征进行抽象和分析是必要的. 这篇文章对二维码的特征分析十分粗略, 但是如果诸位读者能从中学到利用抽象协助分析的技巧, 我写本文的目的也就达到了.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/04/21/QR-Code/#disqus_thread</comments>
    </item>
    
    <item>
      <title>道可道 - 关于抽象和&quot;道&quot;的思考</title>
      <link>https://hisenz.com/2018/04/20/%E9%81%93%E5%8F%AF%E9%81%93/</link>
      <guid>https://hisenz.com/2018/04/20/%E9%81%93%E5%8F%AF%E9%81%93/</guid>
      <pubDate>Fri, 20 Apr 2018 10:18:55 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;道是一切抽象的抽象.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前段时间设计了一个二维码身份验证系统. 每个二维码都具有完全唯一的特性, 并且即使数据库泄露也无法制作出相同的二维码. 另一个项目是在所有的 Pastpaper 上嵌入一个小小的指向 Markscheme 的二维码. 这些项目让我开始思考二维码到底能应用在什么样场景里, 这些场景又有着那些特征. &lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>道是一切抽象的抽象.</p></blockquote><p>前段时间设计了一个二维码身份验证系统. 每个二维码都具有完全唯一的特性, 并且即使数据库泄露也无法制作出相同的二维码. 另一个项目是在所有的 Pastpaper 上嵌入一个小小的指向 Markscheme 的二维码. 这些项目让我开始思考二维码到底能应用在什么样场景里, 这些场景又有着那些特征. </p><a id="more"></a><p>在思考的过程中我意识到了借助抽象协助特征分析的力量 – 把二维码抽象成一个光学信息交换的接口 (An optical programable interface), 就可以相对方便的分析出它的若干特性, 并找到与之对应的适用场景.</p><p>关于二维码的一些想法, 往后再写一篇分析. 今天这篇文章是因为我在抽象二维码这一事物的过程中似乎理解了”道可道, 非常道”中的意味.</p><blockquote><p>道可道, 非常道. 名可名, 非常名.</p></blockquote><h2 id="特征与抽象"><a href="#特征与抽象" class="headerlink" title="特征与抽象"></a>特征与抽象</h2><blockquote><p>If it walks like a duck and quarks like a duck, then it must be a duck.</p></blockquote><p>这段俚语, 各位江学家想必十分熟悉. 如果一件事物和另一件事物的特征完全一致, 两者在抽象层面上就是等价的. </p><p>抽象在设计中是十分重要的能力. 这里给出个系统设计方勉的例子. UNIX里<code>Everything is a file</code>的设计理念就是对抽象的最好诠释. 这样设计的优点是显而易见的: 如果我需要从摄像头里获取视频流, 我只需要像是打开一个正常的文件就可以达成我的目的. 假使我要向磁盘内写入数据, 我也只需像对文件写入内容一样操作. 至于不同存储媒介的具体驱动和操作, 则由抽象层以下的代码负责. 因为抽象, 所有的事物开始变得简单. 由此, 抽象是人类理解世界的一大利器.</p><blockquote><p>Everything is an file.</p></blockquote><p>所谓特征者, 具象描述定义也. 事物被抽象以后, 其特征会减少, 但是更加普适(概念越抽象, 包含的事物越多, 每个个体间的具象差别也越大).</p><h2 id="无极抽象"><a href="#无极抽象" class="headerlink" title="无极抽象"></a>无极抽象</h2><p>但是事物往往可以经过多级抽象.</p><p>比方说, 有一部手机和一台笔记本. 我可以将两者抽象成”具有信息处理能力的电子设备”(现在常说的智能设备). 进一步抽象, 是”能处理信息的机器”(图灵机). 继续抽象, 我们得到了”能处理信息的事物”. 到这个抽象层级的时候, 汉语里就没有对应的表达了. 或许在下实在是才疏学浅. </p><p>虽然在语言层面很难继续抽象, 但是并不代表着不可以继续抽象.由此我们也可以看出:</p><blockquote><p>抽象是有层级的, 而层级是无限的.</p></blockquote><p>也就是说:</p><blockquote><p>事物可以不断的被抽象.</p></blockquote><p>这是这一节标题的内涵. 纵观语言文字的发展历史, 人类的语言系统是向着抽象的方向发展的. 动物只能理解当下, 而人类凭借语言文字理解了时间的存在, 进而了解过去, 展望未来. “时间”是人类最早抽象出来的事物之一. 汉字和古埃及文均是从象形文字开始发展的, 这里也可以发现语言的起源是对世界的符号化抽象化. 随着发展, 象形文字本身已经不能满足人类的需求, 因此出现了两种结果:</p><ol><li>赋予原来的象形文字更多的含义 - 一词多义</li><li>创造新的字/词, 但是不再是对具体事物的描绘 - 抽象化</li></ol><p>信息革命则是最近一次也是最大规模的抽象化 – “互联网”一词显然毫无象形文字的意味了. 这一切都在指示着语言的发展趋势:</p><blockquote><p>抽象.</p></blockquote><p>在科学史上, 还有以太和卡路里这样的认知. 这些也都是抽象, 只不过我们现代科学的模型解释的比这些早期认知更加严谨, 这些抽象才失效. 这里我们能得出的另外一个结论是, 利用抽象的方法进行分析也有可能带来不适合的结论, 因此要对这些分析结果一一带回实际进行验证.</p><h2 id="抽象与”道”"><a href="#抽象与”道”" class="headerlink" title="抽象与”道”"></a>抽象与”道”</h2><p>既然明确指出了这个”道”不是日常所说的”道”, 我们且将其作为一种符号来看待. (从这个层面来抽象一下, 汉字”道”和字母”X”和图形”△”或”○”并没有区别,只是一个symbol而已.)</p><p>我认为, <strong>“道”是无穷的抽象</strong>, 基于以下理由:</p><ol><li>毫无疑问, “道”是个抽象概念, 是一个符号.</li><li>“道” 无法用日常的语言表述. 也就是说, 我们的语言系统还没有抽象到可以描述”道”的境界.</li></ol><p>以上两点均在前文有论述.</p><p>那么为什么说是无穷的呢? 理由很简单. 假设人类的语言系统得到了巨大的发展. 我们给了”一切能处理信息的事物”这个概念一个名词来描述. 但是对这个概念的再抽象则又需要很长的时间. 尝试发明名词来帮助进一步抽象是个没有终结的循环. </p><p>因此:</p><blockquote><p>道是一切抽象的抽象.</p></blockquote><p>从而解释道是世界的本源. 因为具象的事物可以由给抽象添加具象特征(具象化)来产生. 例如计算机就是从图灵机的概念里产生的. </p><p>如果把一切事物, 抽象或非抽象, 用树的结构来表示的话, 所有的”具象事物”就是叶子, 最基础也最基本, 而树根则是”道”. 从树叶开始看, 每一段通向树根的树枝就是抽象的过程. 一根树枝上可以有若干叶子. 若干树枝则汇成更粗的树干. 由于抽象可以是无极的,因此树叶到树根间可以有无限长的树枝来连接. 世间万物组成了一棵巨大无边的树!</p><p>以上这是个人对于道的一些思考. 很可惜, “名可名非常名”这句话我还没有足够的资格和成熟的想法来作诠释. 但是若在生活中多观察多思考, 受到启发, 领会得道是迟早的事.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/04/20/%E9%81%93%E5%8F%AF%E9%81%93/#disqus_thread</comments>
    </item>
    
    <item>
      <title>读书摘要系列</title>
      <link>https://hisenz.com/2018/04/15/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81%E7%B3%BB%E5%88%97/</link>
      <guid>https://hisenz.com/2018/04/15/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81%E7%B3%BB%E5%88%97/</guid>
      <pubDate>Sun, 15 Apr 2018 08:29:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;由于学习生活需要, 越发察觉到快速大量阅读的重要性. 在上一篇文章里我们讨论了快速大量阅读的适用场景和一些技巧, 而这里我将针对摘要笔记展开讨论.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>由于学习生活需要, 越发察觉到快速大量阅读的重要性. 在上一篇文章里我们讨论了快速大量阅读的适用场景和一些技巧, 而这里我将针对摘要笔记展开讨论.</p><a id="more"></a><h2 id="读书摘要"><a href="#读书摘要" class="headerlink" title="读书摘要"></a>读书摘要</h2><p>过去我在阅读的时候几乎没有做笔记的习惯, 一本书看过了也就印在脑海里. 当需要的时候回想起来, 基本上也能记住大概的提要. 但是当阅读量增大时, 单纯的依靠记忆力就显得不是那么有效了. 快速阅读的状态下, 由于大脑需要应对高速且大量的信息输入, 难免会有细节上的遗忘. 比方说,连续的阅读了四本有关于美国20世纪初的图书, 里面包括了大量相互印证的细节和观点, 不同的作者也会有持有不同的意见. 四本书读完的时候, 给我留下了一个大概的印象, 但是有很多主要观点则是逐条的总结记录了下来.</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why?"></a>Why?</h2><p>针对这些事实和观点做适当适当的摘要有利于回顾自己的阅读成果, 也便于回查. 回想起某个事实的时候, 可以在自己的记录里快速查阅出处, 并一带回顾相关的信息(事实/观点). 可以说, 摘要本身也就是阅读中的一个环节. 只是通常人们只强调了读的部分, 而忽略了记录摘要.</p><p>记录摘要是一个主动的, 积极的过程. 这样的活动有助于提醒自己在阅读时候应保持主动的姿态(Critical reading). 同样的, 整理记录也是一个思考的过程. 只被动接受信息而不主动思考是有害的.</p><blockquote><p>学而不思则罔, 思而不学则殆.</p></blockquote><p>我们的国家一直都在强调教育. 从某种层面上说, 提高阅读量确实是提升教育的一种方法; 人均阅读量也是衡量一国国民文化水平的一大指标. 但是, 如果不思考, 读书的功用便丧失了. 私以为, 我们国家学生的智力和阅读量都不低, 但是思考能力却被剥夺了(无论是有意还是无意). 这导致我国国民的思想水平和一百年前几乎毫无差异.</p><p>似乎偏题了. 当然摘记好处还有很多, 我自己也是在最近的阅读上才应用了摘要的方法来帮助阅读.</p><h2 id="方法论及形式"><a href="#方法论及形式" class="headerlink" title="方法论及形式"></a>方法论及形式</h2><p>自己的纸笔摘抄自然是一种方法. 每个人都会找到适合自己的摘记方法, 但是前提是符合自己的阅读习惯. </p><p>以我个人为例, 我习惯阅读电子书. (穷啊, 买不起纸书. 四本书动不动就上百, 学生党负担不起.) 对于我来说, 在快速翻阅之后退出电子书, 回想一下书中出现的不熟悉的概念和作者提出的观点. 然后逐一的不分顺序的把他们用键盘敲出来, 再用Markdown略加以编辑以后区分出层次. 最后会在旁边加注上自己的思考(如果有的话). 以电子档做摘要有几个好处:</p><ul><li>打字速度比手写快, 特别是中文. 如果真的有必要摘抄原句, 电子书也可以提供轻松便捷的复制功能.</li><li>方便检索, 可以充分利用计算机的特性. 有时候自己手写的笔记懒得回去翻看, 一是因为自己手写不好, 辨认费力; 而是因为检索困难. 即便有着完善的编号框架体系, 查找出某一个关键词还是需<br>要花一番功夫的, 特别是很久以前的笔记.</li><li>便于保存, 且高可用. 电子档可以永久留存, 并且可以随时随地翻看. 纸质笔记可能会丢失, 也很难想象读书笔记随身携带. 电脑和手机则允许在任何时间地点存取摘要.</li><li>便于在网络上分享. 可以把自己的见解传播出去影响他人, 提高大众姿势水平, 也可以为他人提供快速了解一本书的便利. 这也是我写作这个博客的一大目的.</li></ul><p>身边有些大佬喜欢边读书边摘记, 有时候会把整个句子抄录下来. 我个人并不是很喜欢这种方式, 原因在于抄录会打断阅读思路, 而且也会降低阅读速度, 在大量阅读的时候是明显不合适的. 不过既然大佬这做, 应该也是有自己的理由的. 所以说适用于每个个体的方法论是不存在的. </p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote><p>年轻人应该大量读书思考, 提高自身的姿势水平, 到西方所有国家都去见识一番. </p></blockquote>]]></content:encoded>
      
      <comments>https://hisenz.com/2018/04/15/%E8%AF%BB%E4%B9%A6%E6%91%98%E8%A6%81%E7%B3%BB%E5%88%97/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

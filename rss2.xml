<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hisen&#39;s Blog</title>
    <link>https://hisenz.com/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Developers of all lands, vereinigt euch!</description>
    <pubDate>Mon, 31 Dec 2018 09:54:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>料理 | 关于舒肥</title>
      <link>https://hisenz.com/post/Sous-Vide/</link>
      <guid>https://hisenz.com/post/Sous-Vide/</guid>
      <pubDate>Sun, 30 Dec 2018 10:46:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;舒肥法&lt;code&gt;Sous Vide&lt;/code&gt;是一种将食材真空低温加热的处理方法. 利用舒肥法可以做出鲜嫩多汁的料理, 把常见的食材潜力尽数发挥. 由于可以把加热过程交给机器控制而无需人工插手, 适合新手以及懒人.&lt;/p&gt;&lt;p&gt;这篇文章介绍了舒肥法基本要点, 一种低成本DIY舒肥机的方法以及鸡胸肉,鸡蛋和牛肉的舒肥法烹调示例.&lt;/p&gt;&lt;p&gt;本文多图, 加载时间略长.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>舒肥法<code>Sous Vide</code>是一种将食材真空低温加热的处理方法. 利用舒肥法可以做出鲜嫩多汁的料理, 把常见的食材潜力尽数发挥. 由于可以把加热过程交给机器控制而无需人工插手, 适合新手以及懒人.</p><p>这篇文章介绍了舒肥法基本要点, 一种低成本DIY舒肥机的方法以及鸡胸肉,鸡蛋和牛肉的舒肥法烹调示例.</p><p>本文多图, 加载时间略长.</p><a id="more"></a><p><img src="https://s1.ax1x.com/2018/12/30/FhVrpF.jpg" alt="chicken_breast_wide.jpg"></p><h2 id="舒肥-时间的魔法"><a href="#舒肥-时间的魔法" class="headerlink" title="舒肥: 时间的魔法"></a>舒肥: 时间的魔法</h2><p>利用舒肥法可以做出鲜嫩多汁的料理, 把常见的食材潜力尽数发挥. 由于可以把加热过程交给机器控制而无需人工插手, 适合新手以及懒人.</p><p>基本的舒肥方式是保持水温恒定, 食材放入塑料袋抽成真空, 在水里慢慢的低温加热. 事实上只要能近似满足这些条件, 也可以做出相当不错的效果.</p><p>由于舒肥是定温烹调法, 所以不会出现烹调过头的情况. 那么质感的控制由两个变量共同决定: 温度和时间. 我自己总结的经验是:　温度决定食材的熟度, 而时间决定嫩度.</p><ol><li><p>温度<br>我认为温度是一个更重要的变量. 别小看一摄氏度的温差. 哪怕只是一摄氏度的温差都会导致最后食材的熟度差异. 以<a href="https://www.gq.com.tw/mobile/blog/cookingpaul/detail-1783.html" rel="external nofollow noopener noreferrer" target="_blank">舒肥蛋的例子</a>作参考, 61-63摄氏度对应的是不同性状的蛋.</p><blockquote><p>熟度的本质是食物的核心温度.</p></blockquote></li><li><p>时间<br><img src="https://s1.ax1x.com/2018/12/30/FhlXAH.png" alt="curve.png"><br>在温度-时间曲线收敛于设定温度的时候, 食材就基本熟了. 此时时间的重要性凸显了出来. 在煮熟的基础上, 时间越长, 析出的汁水也会越多, 食物也就会变得更加入味, 但不那么嫩.</p></li></ol><h2 id="自制设备"><a href="#自制设备" class="headerlink" title="自制设备"></a>自制设备</h2><p>市售舒肥机售价大致在400人民币起步. 我个人的猜测是因为舒肥法在内地听说过的人不多, 市场也不大, 国内很少有厂家生产. 于是就自然而然的想到可以自制一套设备. 说一句题外话, 我在查找舒肥的中文资料的时候, 大多也都是从台湾的博客/网站上习得的. 台湾在先锋餐饮文学方面的繁荣远超内地.</p><h3 id="电路组成"><a href="#电路组成" class="headerlink" title="电路组成"></a>电路组成</h3><p>最初的设想是用Arduino重新造一个轮子出来. 实现起来并不困难, 但是在核算成本的时候发现温度检测模块的价格并不低廉. 于是直接购入一个温控电源. 这个温控电源有自己的防水温度探头. 当温度低于阀值的时候通导, 加热到另一个温度后断开.</p><p><img src="https://s1.ax1x.com/2018/12/30/Fht3VK.jpg" alt="switch.jpg"></p><p>加热器件采用了600W的电热管. 电热管的作用是维持温度, 因此加热功率不需要很大, 保温足矣.</p><p><img src="https://s1.ax1x.com/2018/12/30/Fhtlb6.jpg" alt="heater.jpg"></p><p>另外据悉市面上的米家电磁炉也有舒肥功能, 售价在300左右. 但是我没有使用过, 不作评价.</p><h3 id="成本核算"><a href="#成本核算" class="headerlink" title="成本核算"></a>成本核算</h3><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:center">数量</th><th style="text-align:center">价格/人民币</th></tr></thead><tbody><tr><td style="text-align:center">温控电源</td><td style="text-align:center">1</td><td style="text-align:center">29.9</td></tr><tr><td style="text-align:center">电热管</td><td style="text-align:center">1</td><td style="text-align:center">9.8</td></tr><tr><td style="text-align:center">总计</td><td style="text-align:center"></td><td style="text-align:center">37.7</td></tr></tbody></table><h3 id="组合与使用"><a href="#组合与使用" class="headerlink" title="组合与使用"></a>组合与使用</h3><h4 id="装置如图"><a href="#装置如图" class="headerlink" title="装置如图"></a>装置如图</h4><p><img src="https://s1.ax1x.com/2018/12/30/FhlLHe.jpg" alt="equipment.jpg"></p><p>左侧电热管连接至温控电源. 右上角黑色细线是温控电源的探头.</p><h4 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h4><ol><li>电热管需要全部浸没在水中.</li><li>电热管工作中请勿触碰.</li><li>工作时电热管间歇通电, 频繁开关是正常现象.</li><li>可以把容器放在保温的箱子里, 盖上盖子以减少热量散失. 这样可以节省能源并减小温度波动.</li><li>温度阀值的设置<br>由于电热管即使断电仍然有余温, 会导致温度的继续上升, 超过食谱规定的温度. 经过实验, 我会把启动温度设定在菜谱温度<code>-0.6</code>摄氏度, 停止温度设定在<code>-0.3</code>摄氏度. 这样可以把温度控制在食谱指定的温度左右.</li><li>放入食材前可以加入热水使温度高于菜谱温度<code>3</code>-<code>4</code>摄氏度.这是应为</li><li>温度探头尽可能贴近食物以测得食物本身的温度.</li><li>舒肥的时间和温度参考请参考文末我收集到的一些表格.</li></ol><h2 id="舒肥鸡胸肉"><a href="#舒肥鸡胸肉" class="headerlink" title="舒肥鸡胸肉"></a>舒肥鸡胸肉</h2><p><img src="https://s1.ax1x.com/2018/12/30/FhVgmR.jpg" alt="chicken_breast_square.jpg"></p><blockquote><p>舒肥鸡胸肉 @ 64摄氏度, 40分钟</p></blockquote><p>用舒肥法处理的鸡胸肉异常嫩且多汁, 没有传统方式烹调过度产生的木渣口感(我觉得柴掉的鸡胸肉就该这么形容).</p><table><thead><tr><th style="text-align:center">食材</th><th style="text-align:center">数量</th><th style="text-align:center">市价/人民币</th></tr></thead><tbody><tr><td style="text-align:center">鸡胸肉</td><td style="text-align:center">500克</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">海盐</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">现磨黑胡椒</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">橄榄油</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">百里香(可选)</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">欧芹(可选)</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr></tbody></table><p>一整块鸡胸肉, 两面加盐和现磨黑胡椒. 一定不要吝啬, 最好是粗颗粒的海盐. 黑胡椒必须是现磨, 预磨好的颗粒是没有灵魂的! (预研磨的黑胡椒香气不足)</p><p>加入一些Thyme! 有新鲜的百里香最好, 没有的话也可以用干的来替代. 接下来把调理好的鸡胸肉装入塑料袋(保鲜袋或者是专业的袋子), 并加入一些橄榄油以保持嫩的口感. 将袋子浸入冷水中排出空气, 夹住防止漏气.</p><p>装置预热到64摄氏度. 放入舒肥袋, 浸没全部食材. 如果担心滑落可以用夹子夹在容器边上. 确保温度探头尽可能的贴近食物. 启动计时器, 等待40分钟.</p><p>计时停止时取出舒肥袋. 此时鸡胸肉已经可以食用, 切片并浇上舒肥过程中析出的肉汁. 这是个人更偏爱的食用方式.</p><p>如果喜欢烟熏的味道, 可以油煎带来<a href="https://zh.wikipedia.org/zh-hans/%E7%BE%8E%E6%8B%89%E5%BE%B7%E5%8F%8D%E5%BA%94" rel="external nofollow noopener noreferrer" target="_blank">美拉德反应</a>. 加热铸铁锅至高温, 加入橄榄油并放入鸡胸肉. 保持一段时间再翻面, 表面会有漂亮的褐色纹理.</p><p>鸡胸肉通常会作为主菜<code>main course</code>出现, 和土豆泥搭配. 土豆泥的制作又是另一门学问, 如果为了节省时间只能从土豆泥粉调制. 佐餐饮品可以搭配一些口感清淡的酒.</p><h2 id="舒肥蛋"><a href="#舒肥蛋" class="headerlink" title="舒肥蛋"></a>舒肥蛋</h2><p><img src="https://s1.ax1x.com/2018/12/30/FhVsl4.jpg" alt="egg_60.jpg"></p><blockquote><p>舒肥蛋 @ 63摄氏度,一小时</p></blockquote><table><thead><tr><th style="text-align:center">食材</th><th style="text-align:center">数量</th><th style="text-align:center">市价/人民币</th></tr></thead><tbody><tr><td style="text-align:center">鸡蛋</td><td style="text-align:center">1个</td><td style="text-align:center">0.5</td></tr><tr><td style="text-align:center">日式酱油</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr><tr><td style="text-align:center">欧芹(可选)</td><td style="text-align:center">适量</td><td style="text-align:center">N/A</td></tr></tbody></table><p>相对来说舒肥蛋的制作是最简单的. 常温鸡蛋可以直接放入装置中舒肥, 但是因为鸡蛋可能会与电热管直接接触, 我还是推荐用塑料袋排掉气体再放入设备.</p><p><img src="https://s1.ax1x.com/2018/12/30/FhVy6J.jpg" alt="egg_soy.jpg"></p><blockquote><p>舒肥蛋 @ 63摄氏度,一小时</p></blockquote><p>我个人偏好63摄氏度加热1个小时的口感. 直接打在小碟里, 配上一些日式酱油. 蛋黄浓稠, 口感厚重的像芝士, 蛋白软嫰入口即化. 也可以把加热完成的鸡蛋在冷水里放置一会, 鸡蛋入口时的温度会更加适宜.</p><p><img src="https://s1.ax1x.com/2018/12/30/Fh3Uij.md.jpg" alt="egg_60.jpg"></p><blockquote><p>舒肥蛋 @ 63摄氏度,一个半小时</p></blockquote><p>这一组条件下产生的鸡蛋更像是温泉蛋, 蛋白看上去凝固程度更高一些. 更长的舒肥时间会给鸡蛋带来更厚重的口感.</p><h3 id="牛肉"><a href="#牛肉" class="headerlink" title="牛肉"></a>牛肉</h3><p><img src="https://s1.ax1x.com/2018/12/30/Fh60LF.jpg" alt="sous_vide_beef.jpg"></p><blockquote><p>舒肥牛上脑 @ 58摄氏度,40分钟</p></blockquote><p>牛肉的烹调也是一门大学问, 有机会的话单独写一篇文章来分析. 牛肉的处理同鸡胸肉大致相同, 但是我强烈建议最后下锅引发美拉德反应: 这一步可以给牛排注入灵魂!</p><p>传统方式在对付厚度3厘米以下的牛排时表现还不错, 但是面对更厚的牛排就无能为力了, 往往是两面<code>well done</code>而核心<code>rare</code>. 舒肥法在这种情况下的表现极佳, 可以做到内里的熟度一致.</p><p>下面这张图是传统方式制作的牛排:</p><p><img src="https://s1.ax1x.com/2018/12/30/Fh6wsU.jpg" alt="traditional_beef.jpg"></p><blockquote><p>传统方式制作的牛上脑</p></blockquote><p>对比一下可以发现舒肥法制作的牛肉纤维更细致, 汁水更加的丰富, 口感明显更嫩.</p><h3 id="温度时间表"><a href="#温度时间表" class="headerlink" title="温度时间表"></a>温度时间表</h3><p>以下内容收集自网络</p><h2 id="牛肉-1"><a href="#牛肉-1" class="headerlink" title="牛肉"></a>牛肉</h2><p><img src="https://www.cook72.com/wp-content/uploads/2018/06/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2018-08-06-%E4%B8%8B%E5%8D%885.42.13.png" alt="beef_data"></p><h2 id="禽类"><a href="#禽类" class="headerlink" title="禽类"></a>禽类</h2><p><img src="https://www.cook72.com/wp-content/uploads/2018/05/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2018-05-07-%E4%B8%8B%E5%8D%883.08.49.png" alt=""></p><p><img src="https://www.cook72.com/wp-content/uploads/2018/05/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7-2018-05-07-%E4%B8%8B%E5%8D%883.09.06.png" alt=""></p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/Sous-Vide/#disqus_thread</comments>
    </item>
    
    <item>
      <title>这一年: 2018</title>
      <link>https://hisenz.com/post/2018-summary/</link>
      <guid>https://hisenz.com/post/2018-summary/</guid>
      <pubDate>Mon, 24 Dec 2018 11:17:17 GMT</pubDate>
      <description>
      
        &lt;p&gt;回顾刚刚过去的2018年, 致海森, 也致他的博客.&lt;/p&gt;&lt;h2 id=&quot;开始之前&quot;&gt;&lt;a href=&quot;#开始之前&quot; class=&quot;headerlink&quot; title=&quot;开始之前&quot;&gt;&lt;/a&gt;开始之前&lt;/h2&gt;&lt;p&gt;开始之前, 与各位分享一曲爵士. 请一边听着它, 一边往下读吧.&lt;br&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>回顾刚刚过去的2018年, 致海森, 也致他的博客.</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>开始之前, 与各位分享一曲爵士. 请一边听着它, 一边往下读吧.<br><a id="more"></a></p><p><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/aplayer/1.10.1/APlayer.min.css"></p><script src="https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js"></script><div id="aplayer"></div><script>const ap = new APlayer({    container: document.getElementById('aplayer'),    audio: [{        name: 'Concierto De Aranjuez',        artist: 'Chet Baker & Paul Desmond',        url:'https://img.vim-cn.com/7c/c5d8c3bc552e3254a70ae9d573a575e26e1f45.mp4',        cover: 'http://p1.music.126.net/KSpdMMTs5mMRRzq60hds6A==/724578162716416.jpg'    }]});</script><h2 id="独立博客的第一年"><a href="#独立博客的第一年" class="headerlink" title="独立博客的第一年"></a>独立博客的第一年</h2><p>其实真正的算起来, 开始写博客快有两年了. 最开始的时候在自己的VPS上搭建WordPress, 后来遭受过一次DDoS后就考虑着把平台迁移到GitHub Page. 事实上, 开始使用Hexo标志着我真正开始认真地写博客.</p><p>不过在建站之前, 我是没有写博客的习惯的. 之所以选择自己建立独立博客是因为第三方的平台上限制太多. 况且又有谁愿意把自己文字的命运和一个平台的生死捆绑在一起呢?</p><p>一开始写博客的时候, 我确信没有人会来看. 可能现在也没有. 即便有的话, 我写的文字也多是给搜索引擎的爬虫欣赏的. 孤独地写文字也绝非是什么坏事; 我自己的体验来看, 至少一个人写文字可以让我安静下来. 除了分享, 更多的时候是为了给自己在世界上留下一些痕迹, 偶尔回望的时候, 可以看见当年的自己.</p><p>当我在阅读CSAPP的时候, 我读到了<a href="https://wdxtub.com/" rel="external nofollow noopener noreferrer" target="_blank">小土刀</a>的系列笔记, 进而了解到他的博客. 他是我第一个钦佩的独立博客作者. 大概是从那以后, 我开始有了写自己的独立博客来分享技术和学习成果的念头.</p><p>不像平台, 独立博客没有导流, 流量全看质量. 亦无需紧盯着<code>visit</code>或是<code>follower</code>. 也很自由: 可以说该说的话, 可以做想做的事.</p><p>除了追求宁静, 毅然转向独立站还有一些外在的原因. 近年大环境日益恶化, 可是谁都没有想到这短短一年内竟然倒退成这个地步. 印象最深的是一日某乎更新其隐私政策, 用户可以点击同意或不同意; 选择不同意后重新回到选择界面, 直到用户被”同意”后才可以继续使用产品. 我在企鹅空间嘲讽这一无耻行径, 不料企鹅也是个流氓, 悄无声息的”消失”掉我的声音.</p><p>天下乌鸦是不是一般黑, 我不知道; 国内众厂商不但欺压用户, 往往还狼狈为奸的事实倒是一而再再而三的被实锤.</p><p>不管是自愿想找一个更好的环境, 还是无奈的出走, 总之种种原因让我选择了独立博客. 现在的我很庆幸这一决定.</p><h2 id="年度博文"><a href="#年度博文" class="headerlink" title="年度博文"></a>年度博文</h2><p>这里是今年自认为含金量比较高的几篇文章. 以后的文章(特别是技术文)的文风会向这些优质文章贴近.</p><ol><li><a href="https://hisenz.com/2018/11/02/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/">汇编视角:不同优化级别下的GCC行为分析</a></li><li><a href="https://hisenz.com/2018/12/06/%E5%88%A9%E7%94%A8%E8%B6%8A%E7%95%8C%E5%92%8C%E6%BA%A2%E5%87%BA-C%E8%AF%AD%E8%A8%80/">利用越界和溢出:C语言</a></li><li><a href="https://hisenz.com/2018/04/20/%E9%81%93%E5%8F%AF%E9%81%93/">道可道 - 关于抽象和”道”的思考</a></li><li><a href="https://hisenz.com/2018/04/21/QR-Code/">二维码的抽象特征分析</a></li></ol><p>上半年开始了关于”道”的探究. 我认为”道”的观念里万物同源, “道”是最高的抽象, 由此”道可道,非常道”. 这种古老的东方哲学流派和计算机似乎存在着某种十分紧密的联系.</p><p>下半年最主要的学习内容是汇编和C语言. 私以为每个优秀的程序员都应该对整个计算机体系深入了解, 能擅长Python也能写汇编, 对于硬件电路的工作原理了然于心. 成为一个优秀的programmer, 我还有很长的路要走.</p><h2 id="关于博客的2019"><a href="#关于博客的2019" class="headerlink" title="关于博客的2019"></a>关于博客的2019</h2><p>在写下这篇文章之前, Hisen’s Blog主要关注技术文和一些个人思考. 接下来的一年里我打算增强这个博客的分享属性. 之后的内容大致分为四块:</p><ol><li>技术文/学习贴</li><li>音乐/乐评</li><li>料理</li><li>生活/思考</li></ol><p>计划里新增的category如下:</p><h3 id="1-增加音乐的推荐-amp-乐评"><a href="#1-增加音乐的推荐-amp-乐评" class="headerlink" title="1. 增加音乐的推荐 &amp; 乐评"></a>1. 增加音乐的推荐 &amp; 乐评</h3><p>我想, 大概会新增一些爵士音乐的分享. 从Louis Armstrong到Terry Callier, 爵士乐在历史上有很多好的作品, 即便在当代也是一样. 许多优秀的作品被传唱演绎了近一百年, 这绝不是今天某些当红的流量明星所能享有的荣耀. 如果我的努力能把大多数国人的审美提高哪怕一点点, 我也是很高兴的.</p><p>爵士是浪漫的, 爵士也是绝望的. 爵士离不开misty. 这也是爵士如此吸引人的原因.</p><p>Hisen’s Blog的早期曾有一些爵士乐评, 可惜在一次事故中丢失了. 说是乐评, 那些文章看起来更像是”大段的推荐描述性文字”. 接下来的一年里, 我将尝试在这个方向上取得一些突破.</p><h3 id="2-增加料理板块"><a href="#2-增加料理板块" class="headerlink" title="2. 增加料理板块"></a>2. 增加料理板块</h3><p>我对食物和烹饪抱有极大的兴趣. 这可能继承自家父.</p><p>在目前的设想里, 这个板块里面主要以图文的形式呈现西餐食物及制作, 不定期的也会收集一些学习资源共享出来. 大多数国人认为西餐的式样和制作都简单, 可能是由于美国快餐文化带来的影响所致. 事实上整个欧洲在过去的数千年内积累下来的餐饮学问和中餐一样博大精深; 从某些层面看, 西餐的细节把控较中式餐点更为严格.</p><p>例如美式早餐的代表<code>Egg Benedict</code>的构成很简单:一片”面包”, 一块”培根”, 一只溏心蛋和荷兰酱. 但是作为”面包”的<code>Muffin</code>分为英式和美式(事实上它是蛋糕的一种); 使用到的培根也是一种火腿; 荷兰酱必须现做, 制作的过程也需要精细控制温度. 假如处理不当, 做出来的<code>Hollandaise Sauce</code>会有蛋腥味.</p><p>分享美食的制作过程和美食本身一样令人愉悦.</p><h3 id="3-修改生活板块"><a href="#3-修改生活板块" class="headerlink" title="3. 修改生活板块"></a>3. 修改生活板块</h3><p>过去这个分类下往往包含了自己的思考和一些对时事的看法. 现在它也将囊括一些Life Hacking的内容. 目前有计划打算低成本实现一台舒肥机, 或许过不久它就会出现在我的博文里.</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>余下的时间里, 继续享受爵士乐大师们的作品吧 : )</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/2018-summary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C语言 | Register变量</title>
      <link>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E4%B9%8Bregister%E5%8F%98%E9%87%8F-%E8%AF%91%E8%87%AA-The-C-Programming-Language/</link>
      <guid>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E4%B9%8Bregister%E5%8F%98%E9%87%8F-%E8%AF%91%E8%87%AA-The-C-Programming-Language/</guid>
      <pubDate>Fri, 14 Dec 2018 05:18:16 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文译自The C Programming Language的4.7章节.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>本文译自The C Programming Language的4.7章节.</p><a id="more"></a><p><code>register</code>变量声明会告知编译器该变量会被频繁使用. <code>register</code>变量在运行时存放在机器的寄存器里, 这样生成的程序更短小, 速度也更快. 但是编译器也可能忽略这些建议.</p><p><code>register</code>变量的声明看起来像这样:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="keyword">int</span>  x;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">char</span> c;</span><br></pre></td></tr></table></figure><p>这样的声明只可以用于局部变量和函数的形式参数.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="keyword">register</span> <span class="keyword">unsigned</span> m, <span class="keyword">register</span> <span class="keyword">long</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">register</span> <span class="keyword">int</span> i;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上, 寄存器变量受到一些来自于底层硬件的限制. 每个函数中只有一部分某种类型的变量才会被放在寄存器里. 但是过量的申明并不会造成不良后果, 因为过量的<code>register</code>声明会被编译器忽略. <code>register</code>修饰的变量也不可以被取地址(这个话题在第五章里讨论), 无论是否该变量真的放在寄存器里. 具体的数量和类型限制由特定的机器决定.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E4%B9%8Bregister%E5%8F%98%E9%87%8F-%E8%AF%91%E8%87%AA-The-C-Programming-Language/#disqus_thread</comments>
    </item>
    
    <item>
      <title>C语言 | 头文件</title>
      <link>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6-%E8%AF%91%E8%87%AA%E7%AB%A0%E8%8A%824-5-The-C-Programming-Language/</link>
      <guid>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6-%E8%AF%91%E8%87%AA%E7%AB%A0%E8%8A%824-5-The-C-Programming-Language/</guid>
      <pubDate>Thu, 13 Dec 2018 12:41:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;本文译自The C Programming Language的4.5章节.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>本文译自The C Programming Language的4.5章节.</p><a id="more"></a><p>现在让我们考虑一下把刚刚编写的计算器程序拆分到几个源文件中, 因为以后每个功能的代码量会越来越多. 我们把主函数写在<code>main.c</code>; <code>push</code>, <code>pop</code>两个函数和其他变量放到<code>stack.c</code>里; <code>getop</code>放在<code>getop.c</code>. 最后把<code>getch</code>和<code>ungetch</code>写到第四个文件<code>getch.c</code>. 之所以把它们分散到不同的源文件中, 是因为他们在实际的工程项目里会被分别编译为库.</p><p>但是有一点要注意: 有些定义和声明同时被几个源文件引用. 我们需要尽可能的把它们集中在一起, 那么在后续的开发中我们只要维护好这个文件就可以了. 我们把这些需要共享的部分放在一个头文件<code>calc.h</code>里, 在需要它们的源文件里<code>#include</code>它. (<code>#include</code> 会在 4.11 章节讲述)</p><p>最终, 这个计算器程序看上去是这样的:</p><p><img src="https://s1.ax1x.com/2018/12/13/FN8LyF.png" alt="FN8LyF.png"></p><p>这么一来, 要么每个源文件只能访问到它需要的信息, 要么有大量的头文件需要维护(在实际工程里这很困难). 权衡利弊,我们选择前者. 在一些中等规模的项目中, 最好的方法往往是通过单一的头文件来包括所有需要被共享的部分; 这也是我们在这里的做法. 在大型的程序中有更多的头文件, 项目结构也需要更加精心的设计.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/C%E8%AF%AD%E8%A8%80%E5%A4%B4%E6%96%87%E4%BB%B6-%E8%AF%91%E8%87%AA%E7%AB%A0%E8%8A%824-5-The-C-Programming-Language/#disqus_thread</comments>
    </item>
    
    <item>
      <title>利用越界和溢出:C语言</title>
      <link>https://hisenz.com/post/%E5%88%A9%E7%94%A8%E8%B6%8A%E7%95%8C%E5%92%8C%E6%BA%A2%E5%87%BA-C%E8%AF%AD%E8%A8%80/</link>
      <guid>https://hisenz.com/post/%E5%88%A9%E7%94%A8%E8%B6%8A%E7%95%8C%E5%92%8C%E6%BA%A2%E5%87%BA-C%E8%AF%AD%E8%A8%80/</guid>
      <pubDate>Thu, 06 Dec 2018 04:45:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;这篇文章以一道challenge为例, 讲述C语言的越界和溢出. 本篇也是自己的学习记录.&lt;/p&gt;&lt;p&gt;某日&lt;a href=&quot;https://github.com/rod-lin&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;罗德大佬&lt;/a&gt;在群内分享了一道题:&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>这篇文章以一道challenge为例, 讲述C语言的越界和溢出. 本篇也是自己的学习记录.</p><p>某日<a href="https://github.com/rod-lin" rel="external nofollow noopener noreferrer" target="_blank">罗德大佬</a>在群内分享了一道题:</p><a id="more"></a><p>题目与代码如下</p><blockquote><p>What argument(s) to this program will cause it to print “Admin/Debug rights”?</p><p>什么参数可以使得这段程序输出 “Admin/Debug rights”?</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N (20)</span></span><br><span class="line"><span class="keyword">int</span> admin, debug;</span><br><span class="line"><span class="keyword">int</span> histogram[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c, h = <span class="number">0</span>;   <span class="comment">//adbm hash</span></span><br><span class="line">    <span class="keyword">while</span> (c = *str++)</span><br><span class="line">        h = c + (h &lt;&lt; <span class="number">6</span>) + (h &lt;&lt; <span class="number">16</span>) - h;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (argc&gt;<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span>* word = argv[--argc];</span><br><span class="line">        <span class="keyword">int</span> h = hash(word);</span><br><span class="line">        histogram[ (h&lt;<span class="number">0</span>?-h:h) % N ] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (admin || debug) <span class="built_in">puts</span>(<span class="string">"Admin/Debug rights"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="初步思路"><a href="#初步思路" class="headerlink" title="初步思路"></a>初步思路</h2><p>要打印这个字符串, 就必须修改admin或者debug值.</p><p>首先观察整段代码, 发现没有对这两个变量变量操作的语句. 因此可以肯定不是常规操作. 那么就要考虑利用指针来修改这两个变量里的内容.</p><p>进一步分析, 发现数组histogram和这两个整型变量在内存中是邻接的. 于是很自然的想到利用越界.</p><h2 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h2><p>C语言为了执行效率, 并不会检查数组越界. 这是因为数组的本质是一段连续的内存空间; 其中的每个元素在使用的时候, 都是通过相对数组首元素的偏移地址来查找:</p><p>$$ address_{base} + index * size_{element} $$</p><p>也就是说, 使用数组的<code>[ ]</code>符号实际上访问的就是线性变换过的地址, 比指针使用起来方便一些 - 你不需要记得地址递增递减的size.</p><p>因此只要计算出来的地址是有效地址, 数组越界的时候就不会报错.</p><p>这里由于两个变量的地址在数组之前, 因此我们使用负的index, 就可以访问到这两个变量的位置. 对负数取模, 结果仍是负数; 操纵数组前面地址的index在0到-19这个区间,包括了那两个变量.</p><h2 id="负绝对值"><a href="#负绝对值" class="headerlink" title="负绝对值"></a>负绝对值</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>但是仔细观察index的表达式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram[ (h&lt;<span class="number">0</span>?-h:h) % N ] ++;</span><br></pre></td></tr></table></figure><p>这里的index是先对h取绝对值再取模, 也就是说index应该只能是正数.</p><p>然而有一种特殊的情况, 使得绝对值函数会输出负数. 让我们来看一下<code>h&lt;0?-h:h</code>的C语言与反汇编代码<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// abs.c</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&lt;<span class="number">0</span>?-x:x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>编译&amp;反汇编<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --no-builtin 排除掉了内建的函数</span></span><br><span class="line">gcc -c abs.c --no-builtin </span><br><span class="line"></span><br><span class="line"><span class="comment"># 反汇编</span></span><br><span class="line">objdump -d abs.o</span><br></pre></td></tr></table></figure><p></p><p>以下是排版稍作调整的结果, 去掉了偏移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push   %rbp</span><br><span class="line">mov    %rsp,%rbp</span><br><span class="line">mov    %edi,-0x4(%rbp)  ; pass parameter</span><br><span class="line">mov    -0x4(%rbp),%eax  ; save it in eax</span><br><span class="line">cltd                    ; sign-extend: see below</span><br><span class="line">mov    %edx,%eax        ; </span><br><span class="line">xor    -0x4(%rbp),%eax  ; it depends: see below</span><br><span class="line">sub    %edx,%eax;</span><br><span class="line">pop    %rbp</span><br><span class="line">retq</span><br></pre></td></tr></table></figure><p>注意第5行指令<code>cltd</code>. 该指令做符号位拓展. 若<code>eax</code>的符号位为0(<code>eax</code>值非负), 则<code>edx</code>全部置0; 否则全部置1. 例如, 当<code>eax</code>为<code>0x7F000000</code>,<code>edx</code>会变成<code>0x00000000</code>.如果<code>eax</code>为<code>0x80000000</code>,<code>edx</code>会变成<code>0xFFFFFFFF</code>. 请参考SO上<a href="https://stackoverflow.com/a/17170478" rel="external nofollow noopener noreferrer" target="_blank">这个回答</a>和维基百科对<a href="https://en.m.wikipedia.org/wiki/Sign_bit" rel="external nofollow noopener noreferrer" target="_blank">符号位的介绍</a>.</p><p>下面我们来看第7-8行的异或和减法:</p><ol><li><p>当参数为正</p><p>此时参数与<code>0x00000000</code>异或, 结果不变;</p><p>随后参数减去<code>0x00000000</code>, 结果仍然不变.</p></li><li><p>参数为负时</p><p>参数与<code>0xFFFFFFFF</code>异或, 相当于取反;</p><p>取反后的参数减去<code>0xFFFFFFFF</code>, 相当于加一.</p></li></ol><p>我们看一下正常情况下, 一个负整数<code>-1024</code>作为参数时的运算过程:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push   %rbp</span><br><span class="line">mov    %rsp,%rbp</span><br><span class="line">mov    %edi,-0x4(%rbp)  ; 0xfffffc00</span><br><span class="line">mov    -0x4(%rbp),%eax  ; eax = 0x80000000</span><br><span class="line">cltd                    ; edx = 0xffffffff</span><br><span class="line">mov    %edx,%eax        ; eax = 0xffffffff</span><br><span class="line">xor    -0x4(%rbp),%eax  ; eax = 0x3ff</span><br><span class="line">sub    %edx,%eax; eax = 0x400</span><br><span class="line">pop    %rbp</span><br><span class="line">retq</span><br></pre></td></tr></table></figure><p><code>0x400</code>也就是<code>1024</code>.</p><h3 id="陷阱"><a href="#陷阱" class="headerlink" title="陷阱"></a>陷阱</h3><p>但是这里有一个问题: 当输入为<code>INT_MIN</code>(十六进制<code>0x80000000</code>,十进制<code>-2147483648</code>)时, 我们来看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">push   %rbp</span><br><span class="line">mov    %rsp,%rbp</span><br><span class="line">mov    %edi,-0x4(%rbp)  ; 0x80000000</span><br><span class="line">mov    -0x4(%rbp),%eax  ; eax = 0x80000000</span><br><span class="line">cltd                    ; edx = 0xffffffff</span><br><span class="line">mov    %edx,%eax        ; eax = 0xffffffff</span><br><span class="line">xor    -0x4(%rbp),%eax  ; eax = 0x7fffffff</span><br><span class="line">sub    %edx,%eax; eax = 0x80000000</span><br><span class="line">pop    %rbp</span><br><span class="line">retq</span><br></pre></td></tr></table></figure><p>输出仍然是负数<code>0x80000000</code>!</p><p>这是为什么呢?</p><p>执行sub指令前, 寄存器和标志位状态如下:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rax            0x7fffffff2147483647</span><br><span class="line">rdx            0xffffffff4294967295</span><br><span class="line">eflags         0x206[ PF IF ]</span><br></pre></td></tr></table></figure><p></p><p>执行<code>sub %edx,%eax</code>后<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rax            0x7fffffff2147483647</span><br><span class="line">rdx            0xffffffff4294967295</span><br><span class="line">eflags         0xa87[ CF PF SF IF OF ]</span><br></pre></td></tr></table></figure><p></p><p>从elflags可以看出到发生了溢出(<code>OF</code>,针对有符号数),进位(<code>CF</code>,针对无符号数),<code>SF</code>位表明运算结果为负数.</p><h2 id="Hash-暴力搜索解"><a href="#Hash-暴力搜索解" class="headerlink" title="Hash 暴力搜索解"></a>Hash 暴力搜索解</h2><p>由于hash的逆运算很困难, 我决定穷举字符串来计算相匹配的hash. 反正输出域只有一个整数, 碰撞应该还是比较容易的.</p><p>这里用pthread实现多线程, 搜索所有可打印ascii字符空间(32-126), 这里只搜索6字节的所有可能. 八线程搜索完的时间大约30分钟. 实际上由于hash可以并行计算, 也可以用显卡来加速运算.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hash_threads.c</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NO_WORKER 8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> *str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c, h = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(c = *str++)</span><br><span class="line">h = c + (h &lt;&lt; <span class="number">6</span>) + (h &lt;&lt; <span class="number">16</span>) - h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread</span><span class="params">(<span class="keyword">int</span>* no)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = *no;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[RUN] Thread %d.\n"</span>,num); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> str[<span class="number">7</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span> i = <span class="number">32</span>; i &lt;= <span class="number">126</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span> j = <span class="number">32</span>; j &lt;= <span class="number">126</span>; j++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">char</span> k = <span class="number">32</span>; k &lt;= <span class="number">126</span>; k++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> l = <span class="number">32</span>; l &lt;= <span class="number">126</span>; l++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> m = <span class="number">32</span>; m &lt;= <span class="number">126</span>; m++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> n = <span class="number">32</span>+num; n &lt;= <span class="number">126</span>; n+=NO_WORKER)</span><br><span class="line">&#123;</span><br><span class="line">str[<span class="number">0</span>] = i;</span><br><span class="line">str[<span class="number">1</span>] = j;</span><br><span class="line">str[<span class="number">2</span>] = k;</span><br><span class="line">str[<span class="number">3</span>] = l;</span><br><span class="line">str[<span class="number">4</span>] = m;</span><br><span class="line">str[<span class="number">5</span>] = n;</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> (hash(str) == INT_MIN)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"T[%d]\t,%s, &#123; %d, %d, %d, %d, %d, %d, 0 &#125;\n"</span>,</span><br><span class="line">                   num,str,i,j,k,l,m,n);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[EXIT] Thread %d.\n"</span>,num); </span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nice(<span class="number">-20</span>)) perror(<span class="string">"[INFO] Set priority"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_t</span> id[NO_WORKER];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> assign = <span class="number">0</span>;assign &lt; NO_WORKER;assign++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pthread_create(&amp;id[assign],<span class="literal">NULL</span>,(<span class="keyword">void</span> *)thread,&amp;assign))</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="built_in">printf</span> (<span class="string">"Create pthread error!\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> errno;</span><br><span class="line">        &#125; </span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; NO_WORKER;i++)</span><br><span class="line">        pthread_join(id[i],<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O3 -o hash_threads hash_threads.c -lpthread</span><br></pre></td></tr></table></figure><p></p><p>运行结果(部分)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[RUN] Thread 0.</span><br><span class="line">[RUN] Thread 1.</span><br><span class="line">[RUN] Thread 2.</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">T[1],#,F%9Q, &#123; 35, 44, 70, 37, 57, 81, 0 &#125;</span><br><span class="line">T[1],#fzxji, &#123; 35, 102, 122, 120, 106, 105, 0 &#125;</span><br><span class="line">T[1],#w&#125;[ky, &#123; 35, 119, 125, 91, 107, 121, 0 &#125;</span><br><span class="line">T[5],&apos;&apos;lKlM, &#123; 39, 39, 108, 75, 108, 77, 0 &#125;</span><br><span class="line">T[5],&apos;/kjLE, &#123; 39, 47, 107, 106, 76, 69, 0 &#125;</span><br><span class="line">T[5],&apos;8o.m], &#123; 39, 56, 111, 46, 109, 93, 0 &#125;</span><br><span class="line">T[5],&apos;@nMMU, &#123; 39, 64, 110, 77, 77, 85, 0 &#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">[EXIT] Thread 2.</span><br><span class="line">[EXIT] Thread 3.</span><br></pre></td></tr></table></figure><p></p><p>以上的解hash结果取模后均为-8, 也是唯一可能的负数; 直接看来, 向前32字节不可以访问到admin或者debug. 但是编译器可能把变量自动对齐, 这样以来就可以修改到其中部分字节了.</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>一开始调试的时候并没有出现期望的运行结果. 上GDB看:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p &amp;admin</span><br><span class="line">$2 = (int *) 0x5555557550b0 &lt;admin&gt;</span><br><span class="line">(gdb) p &amp;debug</span><br><span class="line">$3 = (int *) 0x5555557550b4 &lt;debug&gt;</span><br><span class="line">(gdb) p &amp;histogram </span><br><span class="line">$4 = (int (*)[20]) 0x555555755060 &lt;histogram&gt;</span><br></pre></td></tr></table></figure><p></p><p>真是无语了 搞了半天histogram居然在两个整型变量的后面….<br>请教<a href="https://github.com/qyvlik" rel="external nofollow noopener noreferrer" target="_blank">yv大佬</a>, 查看了<a href="https://stackoverflow.com/a/21818977" rel="external nofollow noopener noreferrer" target="_blank">SO上的回答</a>: undefined behavior. 看来编译器并不是按照变量定义顺序来决定内存里的数据位置.</p><p>于是修改一下变量名为histo:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$1 = (int *) 0x555555755060 &lt;admin&gt;</span><br><span class="line">(gdb) p &amp;debug</span><br><span class="line">$2 = (int *) 0x555555755064 &lt;debug&gt;</span><br><span class="line">(gdb) p &amp;histo </span><br><span class="line">$3 = (int (*)[20]) 0x555555755080 &lt;histo&gt;</span><br></pre></td></tr></table></figure><p>我使用的编译器为GCC for Debian 7.3.0, 64位, 修改了变量名以后莫名其妙的成了.</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>发现两者内存空间连续, 决定越界</li><li>利用溢出得到负的绝对值输出</li></ol>]]></content:encoded>
      
      <comments>https://hisenz.com/post/%E5%88%A9%E7%94%A8%E8%B6%8A%E7%95%8C%E5%92%8C%E6%BA%A2%E5%87%BA-C%E8%AF%AD%E8%A8%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nov. 30, 2018 at Dubai</title>
      <link>https://hisenz.com/post/Nov-30-2018-at-Dubai/</link>
      <guid>https://hisenz.com/post/Nov-30-2018-at-Dubai/</guid>
      <pubDate>Fri, 30 Nov 2018 10:36:26 GMT</pubDate>
      <description>
      
        &lt;p&gt;Nov. 30, 2018 at Dubai.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>Nov. 30, 2018 at Dubai.</p><a id="more"></a><p><img src="https://s1.ax1x.com/2018/11/30/FmwH2R.jpg" alt="FmwH2R.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/Fmw7G9.jpg" alt="Fmw7G9.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/Fmwbx1.jpg" alt="Fmwbx1.jpg"></p><p><img src="https://s1.ax1x.com/2018/11/30/FmwLKx.jpg" alt="FmwLKx.jpg"></p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/Nov-30-2018-at-Dubai/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Cartesian 3D Vector Lib</title>
      <link>https://hisenz.com/post/Cartesian-3D-Vector-lib/</link>
      <guid>https://hisenz.com/post/Cartesian-3D-Vector-lib/</guid>
      <pubDate>Wed, 21 Nov 2018 12:47:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/HisenZhang/Cartesian-3D-Vector-lib&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;View on GitHub&lt;/a&gt;&lt;/p&gt;&lt;p&gt;A simple vector library written in plain C for educational purpose.&lt;/p&gt;&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This library is written in hope to simplify the coding process for non-professional vector computation.&lt;/p&gt;&lt;p&gt;This library &lt;strong&gt;should not&lt;/strong&gt; be used for industrial or scientific use due to the limited precision and performance; Complex number is not supported either.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><a href="https://github.com/HisenZhang/Cartesian-3D-Vector-lib" rel="external nofollow noopener noreferrer" target="_blank">View on GitHub</a></p><p>A simple vector library written in plain C for educational purpose.</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This library is written in hope to simplify the coding process for non-professional vector computation.</p><p>This library <strong>should not</strong> be used for industrial or scientific use due to the limited precision and performance; Complex number is not supported either.</p><a id="more"></a><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol><li><p>You may copy the files in <code>./include</code> to your project directory and compile it seperately;</p></li><li><p>You may generate a single head file <code>vector.h</code> for your project:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make single</span><br></pre></td></tr></table></figure><p>This generate a single head file in the project root directory <code>./</code>. Copy the <code>./vector.h</code> to your project and include it.</p></li></ol><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>This is a brief demonstration on the commonly used functions’ usage. The output of each statement follows in comments.</p><p>Several practical examples are available in <code>./example</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"include/vector.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Initialize vectors</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span> A = vecSet(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">0.0</span>); </span><br><span class="line">    <span class="built_in">vector</span> B = vecSet(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">3.0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// vecPrint() pretty print the vector</span></span><br><span class="line">    <span class="comment">// in the form of &lt;x,y,z&gt; |modulus|</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Vector A,B\n"</span>);</span><br><span class="line">    vecPrint(A); <span class="comment">// &lt; 1.00, 2.00, 0.00&gt; | 2.24| </span></span><br><span class="line">    vecnPrint(B, <span class="number">4</span>); <span class="comment">// &lt; 0.0000, 1.0000, 3.0000&gt; | 3.1623|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Arithmetic operations</span></span><br><span class="line"><span class="comment">// The comming statements demonstarte </span></span><br><span class="line">    <span class="comment">// 1. Vector Addtion</span></span><br><span class="line">    <span class="comment">// 2. Vector Subtraction</span></span><br><span class="line">    <span class="comment">// 3. Vector Cross Product</span></span><br><span class="line">    <span class="comment">// 4. Vector Dot Product</span></span><br><span class="line">    <span class="comment">// 5. Vector Scalar Product</span></span><br><span class="line">        </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nADD, SUB, CRX, DOT, SCL\n"</span>);</span><br><span class="line">    vecPrint(vecAdd(A, B));  <span class="comment">// &lt; 1.00, 3.00, 3.00&gt; | 4.36|</span></span><br><span class="line">    vecPrint(vecSub(A, B));  <span class="comment">// &lt; 1.00, 1.00,-3.00&gt; | 3.32|</span></span><br><span class="line">    vecPrint(vecCrx(A, B));  <span class="comment">// &lt; 6.00,-3.00, 1.00&gt; | 6.78|</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"% .2f\n"</span>,vecDot(A, B)); <span class="comment">// 2.00</span></span><br><span class="line">    vecPrint(vecScl(A, <span class="number">4.0</span>));  <span class="comment">// &lt; 8.00, 0.00, 0.00&gt; | 8.00|</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Find unit vector</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nUnit A,B\n"</span>);</span><br><span class="line">    vecPrint(vecUnit(A));  <span class="comment">// &lt; 0.45, 0.89, 0.00&gt; | 2.24|</span></span><br><span class="line">    vecPrint(vecUnit(B));  <span class="comment">// &lt; 0.00, 0.32, 0.95&gt; | 3.16|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take negative</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nNEG A,B\n"</span>);</span><br><span class="line">    vecPrint(vecNeg(A));  <span class="comment">// &lt;-1.00,-2.00,-0.00&gt; | 2.24|</span></span><br><span class="line">    vecPrint(vecNeg(B));  <span class="comment">// &lt;-0.00,-1.00,-3.00&gt; | 3.16|</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Take modulus</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\nMOD A,B\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|% .2f|\n"</span>,vecMod(A));  <span class="comment">// 2.24</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"|% .2f|\n"</span>,vecMod(B));  <span class="comment">// 3.16</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h2><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Vector</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">    <span class="keyword">double</span> z;</span><br><span class="line">    <span class="keyword">double</span> mag;</span><br><span class="line">&#125;<span class="built_in">vector</span>;</span><br></pre></td></tr></table></figure><p>The <code>vector</code> type contains components in three dimensions and the overall magnitude. All these data are in <code>double</code> type. Each time an operation is performed to a vector, the magnitude would update automatically.</p><p>You may get a component directly:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> V = vecSet(<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%f"</span>, V.x); <span class="comment">// This prints out the x component of vector V</span></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><h4 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h4><p><code>vecAdd(A, B)</code> returns the sum: <code>A + B</code>.</p><h4 id="Subtraction"><a href="#Subtraction" class="headerlink" title="Subtraction"></a>Subtraction</h4><p><code>vecSub(A, B)</code> returns the difference: <code>A - B</code>.</p><h4 id="Negative"><a href="#Negative" class="headerlink" title="Negative"></a>Negative</h4><p><code>vecNeg(V)</code> returns the negative: <code>- V</code>.</p><h4 id="Modulus"><a href="#Modulus" class="headerlink" title="Modulus"></a>Modulus</h4><p><code>vecMod(V)</code> returns the modulus: <code>| V |</code>.</p><h4 id="Unit-Vector"><a href="#Unit-Vector" class="headerlink" title="Unit Vector"></a>Unit Vector</h4><p><code>vecUnit(V)</code> returns the unit vector: <code>^ V</code>.</p><h4 id="Scalar-Product"><a href="#Scalar-Product" class="headerlink" title="Scalar Product"></a>Scalar Product</h4><p><code>vecScl(V, s)</code> returns the vector <code>s * V</code>.</p><h4 id="Dot-Product"><a href="#Dot-Product" class="headerlink" title="Dot Product"></a>Dot Product</h4><p><code>vecDot(A, B)</code> returns the dot product: <code>A · B</code>.</p><h4 id="Cross-Product"><a href="#Cross-Product" class="headerlink" title="Cross Product"></a>Cross Product</h4><p><code>vecCrx(A, B)</code> returns the Cross product: <code>A × B</code>.</p><h3 id="Utilities"><a href="#Utilities" class="headerlink" title="Utilities"></a>Utilities</h3><h4 id="Initialization"><a href="#Initialization" class="headerlink" title="Initialization"></a>Initialization</h4><p>There’re two ways to initialize a vector:</p><ol><li><code>vecSet(x, y, z)</code> returns a vector specify the coordinates (x,y,z).</li><li><code>vecInit()</code> returns a vector with coordinates all of <code>0.0</code>. However, you should use <code>vecSet(0.0, 0.0, 0.0)</code> instead for better readability.</li></ol><h4 id="Pretty-Print"><a href="#Pretty-Print" class="headerlink" title="Pretty Print"></a>Pretty Print</h4><ol><li><code>vecPrint(V)</code> prints the vector in the form of <code>&lt;x, y, z&gt; | modulus |</code>, 2 decimal places by default</li><li><code>vecnPrint(V, p)</code> using the specified precision <code>p</code>. If p is 0, print in exponential form.</li></ol>]]></content:encoded>
      
      <comments>https://hisenz.com/post/Cartesian-3D-Vector-lib/#disqus_thread</comments>
    </item>
    
    <item>
      <title>汇编视角:不同优化级别下的GCC行为分析</title>
      <link>https://hisenz.com/post/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</link>
      <guid>https://hisenz.com/post/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/</guid>
      <pubDate>Fri, 02 Nov 2018 15:58:55 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;&lt;p&gt;本篇以memcpy这一函数为例, 分别在0-3的gcc优化级别下编译并反汇编, 并对反汇编得到的代码进行分析, 以观察不同优化级别下gcc的行为.&lt;/p&gt;&lt;p&gt;本文使用的gcc版本 7.3.0&lt;/p&gt;&lt;p&gt;以下汇编与反汇编均在x64平台上进行&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Optimize-Options.html#Optimize-Options&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;gcc的官方文档&lt;/a&gt;中有对于优化参数&lt;code&gt;-O&lt;/code&gt;的描述. 简要概括如下:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align:center&quot;&gt;优化级别&lt;/th&gt;&lt;th style=&quot;text-align:center&quot;&gt;描述&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;关闭优化. gcc的默认选项&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;在不明显拖慢编译速度的情况下减小代码尺寸, 提升执行速度&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;在不以存储空间换运行时间的前提下, 采用几乎所有gcc支持的优化方法&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;&lt;td style=&quot;text-align:center&quot;&gt;二级优化的基础上进一步优化&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;还有便于debug的&lt;code&gt;Og&lt;/code&gt;, 骚操作(极致优化但不遵从编码规范)的&lt;code&gt;Ofast&lt;/code&gt;, 介于2-3级别间的&lt;code&gt;Os&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;整体上而言, 优化级别越高, 编译速度会越慢, 占用的内存越大; 同时, 生成的代码运行时速度越快, 可读性越低.&lt;/p&gt;&lt;p&gt;下面我们用实际的例子来看一看不同优化级别下gcc的具体行为. 选择memcpy作为例子是因为它的实现代码足够简单, 但是涉及了传参, 条件判断和循环, 是逻辑密集型的代码, 能很好的体现gcc在逻辑上的优化.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>本篇以memcpy这一函数为例, 分别在0-3的gcc优化级别下编译并反汇编, 并对反汇编得到的代码进行分析, 以观察不同优化级别下gcc的行为.</p><p>本文使用的gcc版本 7.3.0</p><p>以下汇编与反汇编均在x64平台上进行</p></blockquote><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><a href="https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Optimize-Options.html#Optimize-Options" rel="external nofollow noopener noreferrer" target="_blank">gcc的官方文档</a>中有对于优化参数<code>-O</code>的描述. 简要概括如下:</p><table><thead><tr><th style="text-align:center">优化级别</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">关闭优化. gcc的默认选项</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">在不明显拖慢编译速度的情况下减小代码尺寸, 提升执行速度</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">在不以存储空间换运行时间的前提下, 采用几乎所有gcc支持的优化方法</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">二级优化的基础上进一步优化</td></tr></tbody></table><p>还有便于debug的<code>Og</code>, 骚操作(极致优化但不遵从编码规范)的<code>Ofast</code>, 介于2-3级别间的<code>Os</code>.</p><p>整体上而言, 优化级别越高, 编译速度会越慢, 占用的内存越大; 同时, 生成的代码运行时速度越快, 可读性越低.</p><p>下面我们用实际的例子来看一看不同优化级别下gcc的具体行为. 选择memcpy作为例子是因为它的实现代码足够简单, 但是涉及了传参, 条件判断和循环, 是逻辑密集型的代码, 能很好的体现gcc在逻辑上的优化.</p><a id="more"></a><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="C-实现"><a href="#C-实现" class="headerlink" title="C 实现"></a>C 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is the implementation in coreutils</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Since no stdlib included, define size_t</span></span><br><span class="line"><span class="comment">// On x64 size_t is defined as unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> size_t unsigned long</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memcpy</span> <span class="params">(<span class="keyword">void</span> *destaddr, <span class="keyword">void</span> <span class="keyword">const</span> *srcaddr, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *dest = destaddr;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">const</span> *src = srcaddr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (len-- &gt; <span class="number">0</span>)</span><br><span class="line">        *dest++ = *src++;</span><br><span class="line">    <span class="keyword">return</span> destaddr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h3><p>编译与反汇编命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o memcpy.o memcpy.c -Ox <span class="comment"># x为优化级别</span></span><br><span class="line">objdump -d memcpy.o</span><br></pre></td></tr></table></figure><h4 id="关闭优化"><a href="#关闭优化" class="headerlink" title="关闭优化"></a>关闭优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:55                   push   %rbp; save old rbp</span><br><span class="line">   1:48 89 e5             mov    %rsp,%rbp; set rsp = new rbp</span><br><span class="line">   4:48 89 7d e8          mov    %rdi,-0x18(%rbp); destaddr -&gt; rbp-18h</span><br><span class="line">   8:48 89 75 e0          mov    %rsi,-0x20(%rbp); srcaddr -&gt; rbp-20h</span><br><span class="line">   c:48 89 55 d8          mov    %rdx,-0x28(%rbp); len -&gt; rbp-28h</span><br><span class="line">  10:48 8b 45 e8          mov    -0x18(%rbp),%rax; dest -&gt; rbp-8h</span><br><span class="line">  14:48 89 45 f8          mov    %rax,-0x8(%rbp);</span><br><span class="line">  18:48 8b 45 e0          mov    -0x20(%rbp),%rax; src -&gt; rbp-10h</span><br><span class="line">  1c:48 89 45 f0          mov    %rax,-0x10(%rbp);</span><br><span class="line">  20:eb 1d                jmp    3f &lt;memcpy+0x3f&gt;</span><br><span class="line">  22:48 8b 55 f0          mov    -0x10(%rbp),%rdx; inc src</span><br><span class="line">  26:48 8d 42 01          lea    0x1(%rdx),%rax;</span><br><span class="line">  2a:48 89 45 f0          mov    %rax,-0x10(%rbp);</span><br><span class="line">  2e:48 8b 45 f8          mov    -0x8(%rbp),%rax; inc dest</span><br><span class="line">  32:48 8d 48 01          lea    0x1(%rax),%rcx;</span><br><span class="line">  36:48 89 4d f8          mov    %rcx,-0x8(%rbp);</span><br><span class="line">  3a:0f b6 12             movzbl (%rdx),%edx; move content in src</span><br><span class="line">  3d:88 10                mov    %dl,(%rax); into dest bytewise</span><br><span class="line">  3f:48 8b 45 d8          mov    -0x28(%rbp),%rax; len --</span><br><span class="line">  43:48 8d 50 ff          lea    -0x1(%rax),%rdx;</span><br><span class="line">  47:48 89 55 d8          mov    %rdx,-0x28(%rbp);</span><br><span class="line">  4b:48 85 c0             test   %rax,%rax; if old len = 0 escape</span><br><span class="line">  4e:75 d2                jne    22 &lt;memcpy+0x22&gt;</span><br><span class="line">  50:48 8b 45 e8          mov    -0x18(%rbp),%rax; return dest</span><br><span class="line">  54:5d                   pop    %rbp; restore rbp</span><br><span class="line">  55:c3                   retq</span><br></pre></td></tr></table></figure><p>关闭优化生成的代码比较呆板, 但是严格按照x64的调用规范<code>call convention</code>操作, 入栈<code>rbp</code>. 这里比较低效的是gcc将所有通过寄存器传入的参数保存到栈内, 像是x86风格, 导致数据的读写变慢.</p><p>指针后自增的操作是先从内存取出变量放到中间寄存器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov    -0x8(%rbp),%rax</span><br></pre></td></tr></table></figure><p>自增这个地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lea    0x1(%rax),%rcx</span><br></pre></td></tr></table></figure><p>再写回内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov    %rcx,-0x8(%rbp)</span><br></pre></td></tr></table></figure><p>关键的复制操作是利用中间寄存器里的值来完成, 和正常的认知有些不一样.</p><p>有个奇怪的地方:还有明明是bytewise的复制操作(18行), 为什么这里拷贝了四字节再取低8位, gcc真是奇怪.</p><h4 id="一级优化"><a href="#一级优化" class="headerlink" title="一级优化"></a>一级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 0:48 89 f8             mov    %rdi,%rax; dest addr for return</span><br><span class="line"> 3:48 85 d2             test   %rdx,%rdx; if len = 0 escape </span><br><span class="line"> 6:74 17                je     1f &lt;memcpy+0x1f&gt;; </span><br><span class="line"> 8:b9 00 00 00 00       mov    $0x0,%ecx; initialize counter</span><br><span class="line"> d:44 0f b6 04 0e       movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">12:44 88 04 08          mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">16:48 83 c1 01          add    $0x1,%rcx; inc counter</span><br><span class="line">1a:48 39 d1             cmp    %rdx,%rcx; if count != len continue </span><br><span class="line">1d:75 ee                jne    d &lt;memcpy+0xd&gt;;</span><br><span class="line">1f:f3 c3                repz retq</span><br></pre></td></tr></table></figure><p>开启优化后得到另外一种风格. 可以看出参数没有被放入内存, 而是直接读写寄存器, 从时间效率上来看要快不少. 这也是x64的一个优点之一: 四个整形变量可以直接从寄存器传参而不用入栈, 节约了压栈和读写内存的时间.</p><p>复制的关键代码只有三行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">add    $0x1,%rcx; inc counter</span><br></pre></td></tr></table></figure><p>不得不承认, gcc的这个写法还是挺漂亮的.</p><h4 id="二级优化"><a href="#二级优化" class="headerlink" title="二级优化"></a>二级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:48 85 d2             test   %rdx,%rdx; if len = 0 escape</span><br><span class="line">   3:48 89 f8             mov    %rdi,%rax; dest addr for return</span><br><span class="line">   6:74 1a                je     22 &lt;memcpy+0x22&gt;; if len = 0 escape</span><br><span class="line">   8:31 c9                xor    %ecx,%ecx; set ecx to 0</span><br><span class="line">   a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1); for alignment</span><br><span class="line">  10:44 0f b6 04 0e       movzbl (%rsi,%rcx,1),%r8d; copy src+count into ecx</span><br><span class="line">  15:44 88 04 08          mov    %r8b,(%rax,%rcx,1); into dest+count</span><br><span class="line">  19:48 83 c1 01          add    $0x1,%rcx; inc counter</span><br><span class="line">  1d:48 39 d1             cmp    %rdx,%rcx; if count != len continue</span><br><span class="line">  20:75 ee                jne    10 &lt;memcpy+0x10&gt;;</span><br><span class="line">  22:f3 c3                repz retq</span><br></pre></td></tr></table></figure><p>这一段代码和O1生成的大同小异.</p><p>第5行<code>ecx</code>与自己异或的操作一开始没看懂, 但是想了想XOR的运算规则:</p><table><thead><tr><th style="text-align:center">情况</th><th style="text-align:center">X</th><th style="text-align:center">Y</th><th style="text-align:center">X XOR Y</th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">B</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">C</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p>由于是和自己异或, 那么输入的<code>X</code>与<code>Y</code>必定相等, 也就是<code>情况A</code>和<code>情况D</code> - 这两种情况结果均为零.也就是说, 一个变量与自己异或得0.</p><p>所以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xor %ecx,%ecx</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov $0,%ecx</span><br></pre></td></tr></table></figure><p>这样写的可读性降低了. 但是为什么编译器认为前者是更好的方案呢?</p><p>我也为此感到困扰. 不过stackoverflow上我找到了一个<a href="https://stackoverflow.com/a/1396552" rel="external nofollow noopener noreferrer" target="_blank">回答</a>:</p><blockquote><p>The opcode is shorter than <code>mov eax, 0</code>, only 2 bytes</p></blockquote><p>仔细一看, 后者的操作码确实只有两字节:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8:31 c9                xor    %ecx,%ecx; set ecx to 0</span><br></pre></td></tr></table></figure><p>相对的, 需要五个字节(其中有四个是空字节)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8:b9 00 00 00 00       mov    $0x0,%ecx; initialize counter</span><br></pre></td></tr></table></figure><p>从而优化.</p><p>回答中还提到了, 与自己异或这个操作在现代处理器上有着很小的执行成本. 本文不展开深究.</p><p>这里还有一段<code>nop</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nopw   0x0(%rax,%rax,1)</span><br></pre></td></tr></table></figure><p>这里的<code>nop</code>和它的参数可能是用来填充字节以对齐.</p><p>最终我们发现二级优化生成的代码还是比一级优化的要多那么一些, 符合我们概要里面的描述.</p><h4 id="三级优化"><a href="#三级优化" class="headerlink" title="三级优化"></a>三级优化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line">0000000000000000 &lt;memcpy&gt;:</span><br><span class="line">   0:85 d2                test   %edx,%edx</span><br><span class="line">   2:48 89 f8             mov    %rdi,%rax</span><br><span class="line">   5:0f 8e 7d 02 00 00    jle    288 &lt;memcpy+0x288&gt;</span><br><span class="line">   b:48 8d 7e 10          lea    0x10(%rsi),%rdi</span><br><span class="line">   f:8d 4a ff             lea    -0x1(%rdx),%ecx</span><br><span class="line">  12:48 39 f8             cmp    %rdi,%rax</span><br><span class="line">  15:48 8d 78 10          lea    0x10(%rax),%rdi</span><br><span class="line">  19:41 0f 93 c0          setae  %r8b</span><br><span class="line">  1d:48 39 fe             cmp    %rdi,%rsi</span><br><span class="line">  20:40 0f 93 c7          setae  %dil</span><br><span class="line">  24:41 08 f8             or     %dil,%r8b</span><br><span class="line">  27:0f 84 33 02 00 00    je     260 &lt;memcpy+0x260&gt;</span><br><span class="line">  2d:83 fa 16             cmp    $0x16,%edx</span><br><span class="line">  30:0f 86 2a 02 00 00    jbe    260 &lt;memcpy+0x260&gt;</span><br><span class="line">  36:41 89 c9             mov    %ecx,%r9d</span><br><span class="line">  39:48 89 f1             mov    %rsi,%rcx</span><br><span class="line">  3c:53                   push   %rbx</span><br><span class="line">  3d:48 f7 d9             neg    %rcx</span><br><span class="line">  40:83 e1 0f             and    $0xf,%ecx</span><br><span class="line">  43:8d 79 0f             lea    0xf(%rcx),%edi</span><br><span class="line">  46:41 39 f9             cmp    %edi,%r9d</span><br><span class="line">  49:0f 82 41 02 00 00    jb     290 &lt;memcpy+0x290&gt;</span><br><span class="line">  4f:85 c9                test   %ecx,%ecx</span><br><span class="line">  51:0f 84 3e 02 00 00    je     295 &lt;memcpy+0x295&gt;</span><br><span class="line">  57:0f b6 3e             movzbl (%rsi),%edi</span><br><span class="line">  5a:83 f9 01             cmp    $0x1,%ecx</span><br><span class="line">  5d:48 8d 5e 01          lea    0x1(%rsi),%rbx</span><br><span class="line">  61:4c 8d 40 01          lea    0x1(%rax),%r8</span><br><span class="line">  65:44 8d 4a fe          lea    -0x2(%rdx),%r9d</span><br><span class="line">  69:40 88 38             mov    %dil,(%rax)</span><br><span class="line">  6c:0f 84 7e 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  72:0f b6 7e 01          movzbl 0x1(%rsi),%edi</span><br><span class="line">  76:83 f9 02             cmp    $0x2,%ecx</span><br><span class="line">  79:48 8d 5e 02          lea    0x2(%rsi),%rbx</span><br><span class="line">  7d:4c 8d 40 02          lea    0x2(%rax),%r8</span><br><span class="line">  81:44 8d 4a fd          lea    -0x3(%rdx),%r9d</span><br><span class="line">  85:40 88 78 01          mov    %dil,0x1(%rax)</span><br><span class="line">  89:0f 84 61 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  8f:0f b6 7e 02          movzbl 0x2(%rsi),%edi</span><br><span class="line">  93:83 f9 03             cmp    $0x3,%ecx</span><br><span class="line">  96:48 8d 5e 03          lea    0x3(%rsi),%rbx</span><br><span class="line">  9a:4c 8d 40 03          lea    0x3(%rax),%r8</span><br><span class="line">  9e:44 8d 4a fc          lea    -0x4(%rdx),%r9d</span><br><span class="line">  a2:40 88 78 02          mov    %dil,0x2(%rax)</span><br><span class="line">  a6:0f 84 44 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  ac:0f b6 7e 03          movzbl 0x3(%rsi),%edi</span><br><span class="line">  b0:83 f9 04             cmp    $0x4,%ecx</span><br><span class="line">  b3:48 8d 5e 04          lea    0x4(%rsi),%rbx</span><br><span class="line">  b7:4c 8d 40 04          lea    0x4(%rax),%r8</span><br><span class="line">  bb:44 8d 4a fb          lea    -0x5(%rdx),%r9d</span><br><span class="line">  bf:40 88 78 03          mov    %dil,0x3(%rax)</span><br><span class="line">  c3:0f 84 27 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  c9:0f b6 7e 04          movzbl 0x4(%rsi),%edi</span><br><span class="line">  cd:83 f9 05             cmp    $0x5,%ecx</span><br><span class="line">  d0:48 8d 5e 05          lea    0x5(%rsi),%rbx</span><br><span class="line">  d4:4c 8d 40 05          lea    0x5(%rax),%r8</span><br><span class="line">  d8:44 8d 4a fa          lea    -0x6(%rdx),%r9d</span><br><span class="line">  dc:40 88 78 04          mov    %dil,0x4(%rax)</span><br><span class="line">  e0:0f 84 0a 01 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line">  e6:0f b6 7e 05          movzbl 0x5(%rsi),%edi</span><br><span class="line">  ea:83 f9 06             cmp    $0x6,%ecx</span><br><span class="line">  ed:48 8d 5e 06          lea    0x6(%rsi),%rbx</span><br><span class="line">  f1:4c 8d 40 06          lea    0x6(%rax),%r8</span><br><span class="line">  f5:44 8d 4a f9          lea    -0x7(%rdx),%r9d</span><br><span class="line">  f9:40 88 78 05          mov    %dil,0x5(%rax)</span><br><span class="line">  fd:0f 84 ed 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 103:0f b6 7e 06          movzbl 0x6(%rsi),%edi</span><br><span class="line"> 107:83 f9 07             cmp    $0x7,%ecx</span><br><span class="line"> 10a:48 8d 5e 07          lea    0x7(%rsi),%rbx</span><br><span class="line"> 10e:4c 8d 40 07          lea    0x7(%rax),%r8</span><br><span class="line"> 112:44 8d 4a f8          lea    -0x8(%rdx),%r9d</span><br><span class="line"> 116:40 88 78 06          mov    %dil,0x6(%rax)</span><br><span class="line"> 11a:0f 84 d0 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 120:0f b6 7e 07          movzbl 0x7(%rsi),%edi</span><br><span class="line"> 124:83 f9 08             cmp    $0x8,%ecx</span><br><span class="line"> 127:48 8d 5e 08          lea    0x8(%rsi),%rbx</span><br><span class="line"> 12b:4c 8d 40 08          lea    0x8(%rax),%r8</span><br><span class="line"> 12f:44 8d 4a f7          lea    -0x9(%rdx),%r9d</span><br><span class="line"> 133:40 88 78 07          mov    %dil,0x7(%rax)</span><br><span class="line"> 137:0f 84 b3 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 13d:0f b6 7e 08          movzbl 0x8(%rsi),%edi</span><br><span class="line"> 141:83 f9 09             cmp    $0x9,%ecx</span><br><span class="line"> 144:48 8d 5e 09          lea    0x9(%rsi),%rbx</span><br><span class="line"> 148:4c 8d 40 09          lea    0x9(%rax),%r8</span><br><span class="line"> 14c:44 8d 4a f6          lea    -0xa(%rdx),%r9d</span><br><span class="line"> 150:40 88 78 08          mov    %dil,0x8(%rax)</span><br><span class="line"> 154:0f 84 96 00 00 00    je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 15a:0f b6 7e 09          movzbl 0x9(%rsi),%edi</span><br><span class="line"> 15e:83 f9 0a             cmp    $0xa,%ecx</span><br><span class="line"> 161:48 8d 5e 0a          lea    0xa(%rsi),%rbx</span><br><span class="line"> 165:4c 8d 40 0a          lea    0xa(%rax),%r8</span><br><span class="line"> 169:44 8d 4a f5          lea    -0xb(%rdx),%r9d</span><br><span class="line"> 16d:40 88 78 09          mov    %dil,0x9(%rax)</span><br><span class="line"> 171:74 7d                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 173:0f b6 7e 0a          movzbl 0xa(%rsi),%edi</span><br><span class="line"> 177:83 f9 0b             cmp    $0xb,%ecx</span><br><span class="line"> 17a:48 8d 5e 0b          lea    0xb(%rsi),%rbx</span><br><span class="line"> 17e:4c 8d 40 0b          lea    0xb(%rax),%r8</span><br><span class="line"> 182:44 8d 4a f4          lea    -0xc(%rdx),%r9d</span><br><span class="line"> 186:40 88 78 0a          mov    %dil,0xa(%rax)</span><br><span class="line"> 18a:74 64                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 18c:0f b6 7e 0b          movzbl 0xb(%rsi),%edi</span><br><span class="line"> 190:83 f9 0c             cmp    $0xc,%ecx</span><br><span class="line"> 193:48 8d 5e 0c          lea    0xc(%rsi),%rbx</span><br><span class="line"> 197:4c 8d 40 0c          lea    0xc(%rax),%r8</span><br><span class="line"> 19b:44 8d 4a f3          lea    -0xd(%rdx),%r9d</span><br><span class="line"> 19f:40 88 78 0b          mov    %dil,0xb(%rax)</span><br><span class="line"> 1a3:74 4b                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1a5:0f b6 7e 0c          movzbl 0xc(%rsi),%edi</span><br><span class="line"> 1a9:83 f9 0d             cmp    $0xd,%ecx</span><br><span class="line"> 1ac:48 8d 5e 0d          lea    0xd(%rsi),%rbx</span><br><span class="line"> 1b0:4c 8d 40 0d          lea    0xd(%rax),%r8</span><br><span class="line"> 1b4:44 8d 4a f2          lea    -0xe(%rdx),%r9d</span><br><span class="line"> 1b8:40 88 78 0c          mov    %dil,0xc(%rax)</span><br><span class="line"> 1bc:74 32                je     1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1be:0f b6 7e 0d          movzbl 0xd(%rsi),%edi</span><br><span class="line"> 1c2:83 f9 0f             cmp    $0xf,%ecx</span><br><span class="line"> 1c5:48 8d 5e 0e          lea    0xe(%rsi),%rbx</span><br><span class="line"> 1c9:4c 8d 40 0e          lea    0xe(%rax),%r8</span><br><span class="line"> 1cd:44 8d 4a f1          lea    -0xf(%rdx),%r9d</span><br><span class="line"> 1d1:40 88 78 0d          mov    %dil,0xd(%rax)</span><br><span class="line"> 1d5:75 19                jne    1f0 &lt;memcpy+0x1f0&gt;</span><br><span class="line"> 1d7:0f b6 7e 0e          movzbl 0xe(%rsi),%edi</span><br><span class="line"> 1db:48 8d 5e 0f          lea    0xf(%rsi),%rbx</span><br><span class="line"> 1df:4c 8d 40 0f          lea    0xf(%rax),%r8</span><br><span class="line"> 1e3:44 8d 4a f0          lea    -0x10(%rdx),%r9d</span><br><span class="line"> 1e7:40 88 78 0e          mov    %dil,0xe(%rax)</span><br><span class="line"> 1eb:0f 1f 44 00 00       nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 1f0:29 ca                sub    %ecx,%edx</span><br><span class="line"> 1f2:41 89 ca             mov    %ecx,%r10d</span><br><span class="line"> 1f5:31 ff                xor    %edi,%edi</span><br><span class="line"> 1f7:41 89 d3             mov    %edx,%r11d</span><br><span class="line"> 1fa:4c 01 d6             add    %r10,%rsi</span><br><span class="line"> 1fd:31 c9                xor    %ecx,%ecx</span><br><span class="line"> 1ff:41 c1 eb 04          shr    $0x4,%r11d</span><br><span class="line"> 203:49 01 c2             add    %rax,%r10</span><br><span class="line"> 206:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 20d:00 00 00 </span><br><span class="line"> 210:66 0f 6f 04 0e       movdqa (%rsi,%rcx,1),%xmm0</span><br><span class="line"> 215:83 c7 01             add    $0x1,%edi</span><br><span class="line"> 218:41 0f 11 04 0a       movups %xmm0,(%r10,%rcx,1)</span><br><span class="line"> 21d:48 83 c1 10          add    $0x10,%rcx</span><br><span class="line"> 221:41 39 fb             cmp    %edi,%r11d</span><br><span class="line"> 224:77 ea                ja     210 &lt;memcpy+0x210&gt;</span><br><span class="line"> 226:89 d7                mov    %edx,%edi</span><br><span class="line"> 228:83 e7 f0             and    $0xfffffff0,%edi</span><br><span class="line"> 22b:89 fe                mov    %edi,%esi</span><br><span class="line"> 22d:41 29 f9             sub    %edi,%r9d</span><br><span class="line"> 230:49 8d 0c 30          lea    (%r8,%rsi,1),%rcx</span><br><span class="line"> 234:48 01 de             add    %rbx,%rsi</span><br><span class="line"> 237:39 fa                cmp    %edi,%edx</span><br><span class="line"> 239:74 22                je     25d &lt;memcpy+0x25d&gt;</span><br><span class="line"> 23b:45 8d 41 01          lea    0x1(%r9),%r8d</span><br><span class="line"> 23f:31 d2                xor    %edx,%edx</span><br><span class="line"> 241:0f 1f 80 00 00 00 00 nopl   0x0(%rax)</span><br><span class="line"> 248:0f b6 3c 16          movzbl (%rsi,%rdx,1),%edi</span><br><span class="line"> 24c:40 88 3c 11          mov    %dil,(%rcx,%rdx,1)</span><br><span class="line"> 250:48 83 c2 01          add    $0x1,%rdx</span><br><span class="line"> 254:44 89 c7             mov    %r8d,%edi</span><br><span class="line"> 257:29 d7                sub    %edx,%edi</span><br><span class="line"> 259:85 ff                test   %edi,%edi</span><br><span class="line"> 25b:7f eb                jg     248 &lt;memcpy+0x248&gt;</span><br><span class="line"> 25d:5b                   pop    %rbx</span><br><span class="line"> 25e:c3                   retq   </span><br><span class="line"> 25f:90                   nop</span><br><span class="line"> 260:48 83 c1 01          add    $0x1,%rcx</span><br><span class="line"> 264:31 d2                xor    %edx,%edx</span><br><span class="line"> 266:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line"> 26d:00 00 00 </span><br><span class="line"> 270:0f b6 3c 16          movzbl (%rsi,%rdx,1),%edi</span><br><span class="line"> 274:40 88 3c 10          mov    %dil,(%rax,%rdx,1)</span><br><span class="line"> 278:48 83 c2 01          add    $0x1,%rdx</span><br><span class="line"> 27c:48 39 ca             cmp    %rcx,%rdx</span><br><span class="line"> 27f:75 ef                jne    270 &lt;memcpy+0x270&gt;</span><br><span class="line"> 281:f3 c3                repz retq </span><br><span class="line"> 283:0f 1f 44 00 00       nopl   0x0(%rax,%rax,1)</span><br><span class="line"> 288:f3 c3                repz retq </span><br><span class="line"> 28a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"> 290:48 89 c1             mov    %rax,%rcx</span><br><span class="line"> 293:eb a6                jmp    23b &lt;memcpy+0x23b&gt;</span><br><span class="line"> 295:48 89 f3             mov    %rsi,%rbx</span><br><span class="line"> 298:49 89 c0             mov    %rax,%r8</span><br><span class="line"> 29b:e9 50 ff ff ff       jmpq   1f0 &lt;memcpy+0x1f0&gt;</span><br></pre></td></tr></table></figure><p>非人类可读代码, 不予评述.</p><p>这个优化级别下代码量明显增多, 猜想是gcc采用空间换时间的策略.</p><h2 id="实验数据"><a href="#实验数据" class="headerlink" title="实验数据"></a>实验数据</h2><p>主函数没有实际的意义, 仅供测试</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i&lt;<span class="number">1000000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span>* str = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(str,<span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>* new_str = (<span class="keyword">char</span>*) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">1024</span>);</span><br><span class="line">        <span class="built_in">memcpy</span>(new_str,str,<span class="number">1024</span>);<span class="comment">// customized memcpy() here</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译命令(主函数关闭优化)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o memcpy_test.o memcpy_test.c</span><br><span class="line">gcc -o <span class="built_in">test</span> memcpy_test.o memcpy.o</span><br></pre></td></tr></table></figure><p>使用linux下的<code>time</code>命令测得(单位:秒)</p><table><thead><tr><th style="text-align:center">优化级别</th><th style="text-align:center">real</th><th style="text-align:center">user</th><th style="text-align:center">sys</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">6.084</td><td style="text-align:center">4.792</td><td style="text-align:center">1.292</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2.602</td><td style="text-align:center">1.306</td><td style="text-align:center">1.290</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2.450</td><td style="text-align:center">1.195</td><td style="text-align:center">1.250</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1.770</td><td style="text-align:center">0.498</td><td style="text-align:center">1.268</td></tr></tbody></table><p>从上表可以看出优化级别越高, 执行速度越快. 虽然三级优化生成的代码长度明显变大, 但是性能确实最优.</p><p>优化级别1-2差别并不是很大 - 不仅从运行速度上来看, 从代码的角度看两者也相差无几.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/%E6%B1%87%E7%BC%96%E8%A7%86%E8%A7%92-%E4%B8%8D%E5%90%8C%E4%BC%98%E5%8C%96%E7%BA%A7%E5%88%AB%E4%B8%8B%E7%9A%84GCC%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>A Example of Docker in Reality</title>
      <link>https://hisenz.com/post/A-Example-of-Docker-in-Reality/</link>
      <guid>https://hisenz.com/post/A-Example-of-Docker-in-Reality/</guid>
      <pubDate>Sun, 14 Oct 2018 08:19:56 GMT</pubDate>
      <description>
      
        &lt;p&gt;The docker on Linux allows easy deployment of software. However, the idea is mainly borrowed from CD ROM.&lt;/p&gt;&lt;p&gt;People used to buy CD disks and put them in to the drive. Whatever brand your computer is, the content (music files, portable softwares) are always available. Such a design saves cost for two reasons:&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>The docker on Linux allows easy deployment of software. However, the idea is mainly borrowed from CD ROM.</p><p>People used to buy CD disks and put them in to the drive. Whatever brand your computer is, the content (music files, portable softwares) are always available. Such a design saves cost for two reasons:</p><a id="more"></a><ol><li>A single release satisfy most of environment;</li><li>Less to learn to operate a standard equipment.</li></ol><p>Now we replace the physical disk with image files and virtualize the CD drive - you can hardly find them nowadays anyway - to fit the growth of the Internet. The distribution cost turns much lower because binaries could be delivered through cables.</p><p>As HFLS Developer Association is a IT club, I tried to make these <a href="/2017/10/30/Elementary-Programming-Study-Package/">“images” of our course</a> in hope that these images can be deployed by other high school IT clubs in need. This works exactly the same as the CD drive example.</p><p>The Cambridge A LEVEL Centers works in this way as well. Many courses are made into packages, and the cooperating school would choose some of these “images” to run. In this manner the A LEVEL’s market share expands rapidly.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/A-Example-of-Docker-in-Reality/#disqus_thread</comments>
    </item>
    
    <item>
      <title>P.A.E. | Paper Assembly Engine</title>
      <link>https://hisenz.com/post/P-A-E-The-Paper-Assembly-Engine/</link>
      <guid>https://hisenz.com/post/P-A-E-The-Paper-Assembly-Engine/</guid>
      <pubDate>Tue, 24 Jul 2018 08:07:08 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;&lt;p&gt;We liberate millions of students and teachers from exam-oriented education by reducing attention and time dissipated on training, with the solution entirely directed by mathematical models.&lt;/p&gt;&lt;p&gt;&lt;em&gt;– Hisen Zhang&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
      
      </description>
      
      <content:encoded><![CDATA[<blockquote><p>We liberate millions of students and teachers from exam-oriented education by reducing attention and time dissipated on training, with the solution entirely directed by mathematical models.</p><p><em>– Hisen Zhang</em></p></blockquote><a id="more"></a><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h3 id="The-Problems"><a href="#The-Problems" class="headerlink" title="The Problems"></a>The Problems</h3><h4 id="What-is-the-Problem"><a href="#What-is-the-Problem" class="headerlink" title="What is the Problem"></a>What is the Problem</h4><ol><li>A lot of wastes for printed past paper booklet</li><li>Great difficulty to make up a paper for internal assessment</li><li>No focus for students while practicing</li></ol><h4 id="Our-Objectives"><a href="#Our-Objectives" class="headerlink" title="Our Objectives"></a>Our Objectives</h4><ol><li>Reduced wastes</li><li>An easier life for teachers</li><li>and students.</li></ol><h4 id="How-We-Achieve-it"><a href="#How-We-Achieve-it" class="headerlink" title="How We Achieve it"></a>How We Achieve it</h4><ol><li>Digitize quiz bank</li><li>Automate paper make up process</li><li>Introduce AI Director</li></ol><h3 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h3><h4 id="Q1-What-is-P-A-E"><a href="#Q1-What-is-P-A-E" class="headerlink" title="Q1 : What is P.A.E.?"></a>Q1 : What is P.A.E.?</h4><blockquote><p>An AI directed question paper assembler. P.A.E. stands for “Paper Assembly Engine”.</p><p>Students may use it for exam-training and teachers are allowed to learn about their student’s progress.</p></blockquote><h4 id="Q2-What’s-Special"><a href="#Q2-What’s-Special" class="headerlink" title="Q2 : What’s Special?"></a>Q2 : What’s Special?</h4><blockquote><p>The entire process is directed by Artificial Intelligence.</p><p>Although many digital quiz banks seem to be handy, a traditional quiz bank requires user to select questions manually. Unlike other quiz banks (such as the one offered by <a href="https://ibo.org/#" rel="external nofollow noopener noreferrer" target="_blank">THE INTERNATIONAL BACCALAUREATE®</a>), our system enables 100% automated process, from selection to assembly to response collection. This feature is achieved by the <code>Data Flow Cycle</code>, a fundamental idea introduced later in this chapter.</p></blockquote><h3 id="About-the-System"><a href="#About-the-System" class="headerlink" title="About the System"></a>About the System</h3><p>To understand the complete system, it would be better to first get familiar with the data flow loop between three main subsystems.</p><h4 id="The-Data-Flow-Cycle"><a href="#The-Data-Flow-Cycle" class="headerlink" title="The Data Flow Cycle"></a>The Data Flow Cycle</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYnOLF.png" alt="system_loop"></p><p>The entire system consists of three subsystems: AI Director, Assembly Engine, and User Interface.</p><p>The data work cycle works like this:</p><ul><li>The <code>AI Director</code> generates weights depending on feedback.</li><li>The <code>Assembly Engine</code> assembles question papers referring to the weights.</li><li>The <code>User Interface</code> Displays papers assembled and create feedback.</li></ul><p><strong>Note:</strong> Chapter 2 describes the three subsystems in details.</p><h4 id="The-Complete-System"><a href="#The-Complete-System" class="headerlink" title="The Complete System"></a>The Complete System</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYy7M6.png" alt="complete_system2"></p><p>Beside the subsystems, other components are labeled in the diagram above. The input of the system is the past paper published on the Internet. The output has two parts: the generated question paper and the AI reports.</p><h5 id="Past-Paper"><a href="#Past-Paper" class="headerlink" title="Past Paper"></a>Past Paper</h5><p>For this program, the A-Level series question paper published by Cambridge International Examination is applied. They are available to qualified centers and teachers.</p><h5 id="Question-Paper"><a href="#Question-Paper" class="headerlink" title="Question Paper"></a>Question Paper</h5><p>The <code>User Interface</code> sends AJAX requests to the API. The return is in JSON. Then the Javascript code in user’s browser refreshes the web page partially.</p><p>The question paper is presented in HTML.</p><h5 id="AI-Report"><a href="#AI-Report" class="headerlink" title="AI Report"></a>AI Report</h5><p>AI report is both available to students and teacher. The contents are generated for two groups of users respectively. For students, this report details their strength and weakness; for teachers, this shows the overall statistics in the system, and a specific profile for each student as well.</p><h5 id="Quiz-Bank"><a href="#Quiz-Bank" class="headerlink" title="Quiz Bank"></a>Quiz Bank</h5><p>In this project, the quiz bank is implemented with <code>sqlite3</code>. The database is light enough to operate and stable enough to keep the questions.</p><p>In most cases, the database is read-only. When multi-user feature works, another database for storing account data should be deployed separately.</p><p>Both <code>Assembly Engine</code> or <code>AI Director</code> may access to the quiz bank.</p><h4 id="Components’-Visibility"><a href="#Components’-Visibility" class="headerlink" title="Components’ Visibility"></a>Components’ Visibility</h4><p><img src="https://s1.ax1x.com/2018/07/24/PYnvdJ.png" alt="visibility"></p><p>Only the User Interface is visible to the users. The rest parts are running in the background. Communication across the line of visibility is implemented with HTTP restful API.</p><h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><h3 id="Assembly-Engine"><a href="#Assembly-Engine" class="headerlink" title="Assembly Engine"></a>Assembly Engine</h3><p>The assembly engine takes weights as input. The questions selected are based on weights on different topics. The output is transmitted in JSON via the API.</p><p>There are different modes for assembly engine to run. The mode is specified implicitly (or explicitly in some occasions) with the parameters passed to the API.</p><p>The interfaces and usage are listed below:</p><table><thead><tr><th style="text-align:center">Interface</th><th style="text-align:center">Method</th><th style="text-align:center">Parameter</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">/paper/</td><td style="text-align:center">[GET]</td><td style="text-align:center">topic_keyword, similar_to</td><td style="text-align:center">If topic_keyword is specified, fetch the questions with the keyword; else select the questions most similar to the value.</td></tr></tbody></table><h3 id="User-Interface"><a href="#User-Interface" class="headerlink" title="User Interface"></a>User Interface</h3><p>The user interface takes the JSON from paper information to render them in the web page. When users type command into the search bar, the Javascript code loaded into user’s web browser will send AJAX requests to the back end. The API server at the back end calls the assembly engine and response with the information of question in JSON.</p><p><strong>Sample Response</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"citation"</span>: <span class="number">0</span>, </span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">24</span>, </span><br><span class="line">    <span class="attr">"op_a"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_b"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_c"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"op_d"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"paper"</span>: <span class="string">"13"</span>, </span><br><span class="line">    <span class="attr">"q_ans"</span>: <span class="string">"A"</span>, </span><br><span class="line">    <span class="attr">"q_content"</span>: <span class="string">"26 Which statement about waves is correct?\n\nA All electromagnetic waves travel at the same speed in a vacuum..."</span>, </span><br><span class="line">    <span class="attr">"q_num"</span>: <span class="number">2</span>, </span><br><span class="line">    <span class="attr">"q_path"</span>: <span class="string">"data/cropped/9702_w14_qp_13_17_1.png"</span>, </span><br><span class="line">    <span class="attr">"quality"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"season"</span>: <span class="string">"w"</span>, </span><br><span class="line">    <span class="attr">"subject"</span>: <span class="string">"9702"</span>, </span><br><span class="line">    <span class="attr">"vector"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"wrong"</span>: <span class="literal">null</span>, </span><br><span class="line">    <span class="attr">"year"</span>: <span class="string">"14"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>Explanation to some important fields:</p><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">citation</td><td style="text-align:center">int</td><td style="text-align:center">How many times the question is referred</td></tr><tr><td style="text-align:center">id</td><td style="text-align:center">int</td><td style="text-align:center">The unique id of the question in the quiz bank</td></tr><tr><td style="text-align:center">q_ans</td><td style="text-align:center">string</td><td style="text-align:center">The answer to the question</td></tr><tr><td style="text-align:center">q_path</td><td style="text-align:center">string</td><td style="text-align:center">Add this to the images’ <code>src</code> attribute</td></tr><tr><td style="text-align:center">quality</td><td style="text-align:center">int</td><td style="text-align:center">The mark for quality. Currently reserved.</td></tr></tbody></table><h3 id="AI-Director"><a href="#AI-Director" class="headerlink" title="AI Director"></a>AI Director</h3><p>The main role played by AI Director is to decide which question to be selected from the quiz bank.</p><h4 id="Pre-Processor"><a href="#Pre-Processor" class="headerlink" title="Pre-Processor"></a>Pre-Processor</h4><p>Since the quiz bank is designed to be updated once a season, it does not make sense to run AI codes over the quiz bank over and over. The idea here is to pre-process through all records in the database and store this information (mainly matrices) on the disk. This method also accelerates the process for question selecting since the decision is made by referring to the matrices with calculated values.</p><p>There will be more introduction to this component in later chapters.</p><h3 id="Accessories"><a href="#Accessories" class="headerlink" title="Accessories"></a>Accessories</h3><h4 id="Cutter"><a href="#Cutter" class="headerlink" title="Cutter"></a>Cutter</h4><p>The cutter is responsible for cutting the images of questions and fetch their answers from the input, which is the past paper in PDF format, and append these data into the database.</p><p>The cutter should be an important component (or, subsystem). However, since this part of the program is highly curriculum related, and only little usage of this function (the update interval is supposed to be 4 months or so), I decided to classify this function as an accessory.</p><p>By the way, this part takes a great portion of time over the development.</p><h2 id="Algorithms"><a href="#Algorithms" class="headerlink" title="Algorithms"></a>Algorithms</h2><p>Most algorithms applied in this program are included in the pre-processor.</p><h3 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h3><p>This method lowers the weights for stopwords (i.e. “and”,”the”) and therefore it highlights the featured words. Sorting these words gives a keyword list used to generate word vectors.</p><h3 id="Cosine-Similarity"><a href="#Cosine-Similarity" class="headerlink" title="Cosine Similarity"></a>Cosine Similarity</h3><p>The cosine distance applies to vectors in spaces with more than three dimensions as well. This made it possible to calculate the similarity between two vectors. The result of cosine distance gets closer to zero if two vectors are more alike. The similarity is defined by $1-\cos\theta$.</p><p>Therefore the difficulty is to generate a vector for each question: and such a vector must be able to display the feature of that question. An assumption is made: the words appeared in the text do have a strong connection to the topic behind. For instance, the word “spring” will come along with the topic “elastic deformation”.</p><h3 id="ISODATA-amp-K-Means"><a href="#ISODATA-amp-K-Means" class="headerlink" title="ISODATA &amp; K-Means"></a>ISODATA &amp; K-Means</h3><p>K-Means clustering works based on Euclidean distance. With the given number of K, the output of this algorithm is the K cluster, Such a method is very straightforward.</p><p>However, this is also the problem. Although only once hyperparameter needs to be specified, The value of K is difficult to decide. In practical, the K is often decided arbitrarily.</p><p>As an improvement to the K-Means algorithm, Iterative Self-Organizing Data Analysis Technique will refer to the K value given, but modify the value during the process as well. This is achieved by splitting and merging the clusters once according to the following conditions:</p><ul><li>If the standard deviation within a cluster exceeds $\theta_{split}$</li><li>If the distance between two centroids are closer than $\theta_{merge}$</li><li>etc.</li></ul><h2 id="Innovations"><a href="#Innovations" class="headerlink" title="Innovations"></a>Innovations</h2><h3 id="Introduction-to-Innovations"><a href="#Introduction-to-Innovations" class="headerlink" title="Introduction to Innovations"></a>Introduction to Innovations</h3><p>While programming this system, some functions already integrated into standard or third-party modules do not fit my case perfectly. For instance, I first planned to use CSV (comma separated values) to store the matrix of cosine similarity. However, storing in text not only occupies large storage space but also has a loss in data precision. Therefore I defined a type of file to store this matrix efficiently.</p><h3 id="CSM-Cosine-Similarity-Matrix-storage"><a href="#CSM-Cosine-Similarity-Matrix-storage" class="headerlink" title="CSM: Cosine Similarity Matrix storage"></a>CSM: Cosine Similarity Matrix storage</h3><p>As suggested in earlier chapter, the matrix of cosine similarity looks like this:<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.2432432</span>],</span><br><span class="line"> [<span class="number">0.2343243</span>,<span class="number">0.0783058</span>],</span><br><span class="line"> [<span class="number">0.0</span>,<span class="number">0.003256</span>,<span class="number">0.18034235</span>]]</span><br></pre></td></tr></table></figure><p></p><p>The calculated cosine similarity matrix is symmetrical. This means it is possible to cut the size in half when it comes to storage, whether in the memory or on the disk. To be precise, the actual elements required to restore a complete n by n matrix is:</p><p>$$\frac {1}{2}n (n-1)$$</p><p>In this case, the values are in the type of float. Each float element has the size of 4 bytes. Therefore the total size of the file is $2n(n-1)$ bytes.</p><p>The built-in function in Python repr() convert the objects in strings, and they can be restored to object with eval(). However, float data here must experience loss in precision because the data is rounded to some digits for saving storage space.</p><p>The comparison below may show how the solution makes a difference. Rounded to 5 digits, a “float” stored in string occupies 8 bytes on average (with “0.” and a comma). n is the dimension of the matrix.</p><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">CSM</th><th style="text-align:center">Round(5)</th><th style="text-align:center">Round(8)</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">19.8 KB</td><td style="text-align:center">39.6 KB</td><td style="text-align:center">54.5 KB</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">2 MB</td><td style="text-align:center">4 MB</td><td style="text-align:center">5.5 MB</td></tr><tr><td style="text-align:center">10000</td><td style="text-align:center">200 MB</td><td style="text-align:center">400 MB</td><td style="text-align:center">550 MB</td></tr></tbody></table><p>Some advantages of applying CSM format:</p><ul><li><p>No loss in data precision</p></li><li><p>More compact storage</p></li></ul><p>In reality, the first 12 bytes are reserved for storing the dimension of the matrix and the values on the symmetrical axis. The following table shows the header of <code>smc</code> files.</p><table><thead><tr><th style="text-align:center">Field</th><th style="text-align:center">Type</th><th style="text-align:center">Size</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">SIZE</td><td style="text-align:center">unsigned long</td><td style="text-align:center">8</td><td style="text-align:center">Dimension</td></tr><tr><td style="text-align:center">SYM_VAL</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">Values on the symmetrical axis</td></tr><tr><td style="text-align:center">DATA</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">Elements in the matrix</td></tr></tbody></table><h3 id="ISODATA-Python-Module"><a href="#ISODATA-Python-Module" class="headerlink" title="ISODATA Python Module"></a>ISODATA Python Module</h3><p>Some projects like PyRadar do integrate the function of ISODATA clustering for image processing. However, there is not a ISODATA library for general purposes. Therefore I started to implement the code from scratch. For making the life easier for other programmers, I decide to make it publicly available.</p><p>This module is for general purposes by allowing vectors as input and the vectors in clusters as output.</p><h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="“I-have-a-Dream”"><a href="#“I-have-a-Dream”" class="headerlink" title="“I have a Dream”"></a>“I have a Dream”</h3><blockquote><p>I have a dream.</p><p>I have a dream, that students may have some spare time, doing some coolest things with coolest people. This project helps by raising the efficiency of training.</p><p>I have a dream, that teachers don’t have to study for the exams, but to study in the fields they are talented. P.A.E. automate this process with machine learning.</p><p>I have a dream, that students may join pure project-based study, instructed by their teachers, instead of being prisoned by examinations…</p><p>I have a dream.</p></blockquote><h3 id="Limitations-and-Improvements"><a href="#Limitations-and-Improvements" class="headerlink" title="Limitations and Improvements"></a>Limitations and Improvements</h3><h4 id="Postulates"><a href="#Postulates" class="headerlink" title="Postulates"></a>Postulates</h4><p>This system is designed to be valid based on these following ‘believed-to-be-true’ statements:</p><ul><li>“Practice makes perfect.”</li><li>The keywords show some features of the text.</li></ul><p>So far these postulates are widely validated. However, no solid shreds of evidence suggest they are truth. In other words, if these statements are proved to be wrong, the system may not be effective as it was proposed.</p>]]></content:encoded>
      
      <comments>https://hisenz.com/post/P-A-E-The-Paper-Assembly-Engine/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
